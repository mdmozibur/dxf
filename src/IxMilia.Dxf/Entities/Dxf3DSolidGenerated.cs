// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// Dxf3DSolid class
    /// </summary>
    public partial class Dxf3DSolid : DxfEntity, IDxfItemInternal
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.ModelerGeometry; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R13; } }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            yield return HistoryObjectPointer;
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }

        internal DxfPointer HistoryObjectPointer { get; } = new DxfPointer();
        public short FormatVersionNumber { get; set; }
        public IList<string> CustomData { get; private set; }
        public IList<string> CustomData2 { get; private set; }
        public IDxfItem HistoryObject { get { return HistoryObjectPointer.Item as IDxfItem; } set { HistoryObjectPointer.Item = value; } }

        public Dxf3DSolid()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FormatVersionNumber = 1;
            this.CustomData = new ListNonNull<string>();
            this.CustomData2 = new ListNonNull<string>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            pairs.Add(new DxfCodePair(100, "AcDbModelerGeometry"));
            pairs.Add(new DxfCodePair(70, this.FormatVersionNumber));
            pairs.AddRange(this.CustomData.Select(p => new DxfCodePair(1, p)));
            pairs.AddRange(this.CustomData2.Select(p => new DxfCodePair(3, p)));
            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(100, "AcDb3dSolid"));
            }
            if (version >= DxfAcadVersion.R2007 && this.HistoryObjectPointer.Handle.Value != 0)
            {
                pairs.Add(new DxfCodePair(350, DxfCommonConverters.HandleString(this.HistoryObjectPointer.Handle)));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.CustomData.Add(pair.StringValue);
                    break;
                case 3:
                    this.CustomData2.Add(pair.StringValue);
                    break;
                case 70:
                    this.FormatVersionNumber = pair.ShortValue;
                    break;
                case 350:
                    this.HistoryObjectPointer.Handle = DxfCommonConverters.HandleString(pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            return null;
        }
    }
}
