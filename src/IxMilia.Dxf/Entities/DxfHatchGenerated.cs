// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfHatch class
    /// </summary>
    public partial class DxfHatch : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Hatch; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R14; } }
        public DxfPoint ElevationPoint { get; set; }
        public DxfVector ExtrusionDirection { get; set; }
        public string PatternName { get; set; }
        public DxfHatchPatternFillMode FillMode { get; set; }
        public DxfColor FillColor { get; set; }
        public bool IsAssociative { get; set; }
        public int _boundaryPathCount { get; set; }
        public IList<BoundaryPathBase> BoundaryPaths { get; private set; }
        public DxfHatchStyle HatchStyle { get; set; }
        public DxfHatchPatternType PatternType { get; set; }
        public double PatternAngle { get; set; }
        public double PatternScale { get; set; }
        public bool IsPatternDoubled { get; set; }
        public int _patternDefinitionLineCount { get; set; }
        public IList<PatternDefinitionLine> PatternDefinitionLines { get; private set; }
        public double PixelSize { get; set; }
        private int _seedPointCount { get; set; }
        public IList<DxfPoint> SeedPoints { get; private set; }
        public bool IsGradient { get; set; }
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        private int _zero { get; set; }
        /// <summary>
        /// Only used by dialog code.
        /// </summary>
        public DxfGradientColorMode GradientColorMode { get; set; }
        /// <summary>
        /// Unknown usage.
        /// </summary>
        public int NumberOfColors { get; set; }
        /// <summary>
        /// Rotation angle for gradients in radians.
        /// </summary>
        public double GradientRotationAngle { get; set; }
        /// <summary>
        /// Unknown usage.
        /// </summary>
        public double GradientDefinitionShift { get; set; }
        /// <summary>
        /// Range is [0.0, 1.0].
        /// </summary>
        public double ColorTint { get; set; }
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        private double _reserved { get; set; }
        /// <summary>
        /// Unknown usage.
        /// </summary>
        public string StringValue { get; set; }

        public DxfHatch()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ElevationPoint = DxfPoint.Origin;
            this.ExtrusionDirection = DxfVector.ZAxis;
            this.PatternName = null;
            this.FillMode = DxfHatchPatternFillMode.PatternFill;
            this.FillColor = DxfColor.ByLayer;
            this.IsAssociative = false;
            this._boundaryPathCount = 0;
            this.BoundaryPaths = new ListNonNull<BoundaryPathBase>();
            this.HatchStyle = DxfHatchStyle.OddParity;
            this.PatternType = DxfHatchPatternType.UserDefined;
            this.PatternAngle = 0.0;
            this.PatternScale = 1.0;
            this.IsPatternDoubled = false;
            this._patternDefinitionLineCount = 0;
            this.PatternDefinitionLines = new ListNonNull<PatternDefinitionLine>();
            this.PixelSize = 1.0;
            this._seedPointCount = 0;
            this.SeedPoints = new ListNonNull<DxfPoint>();
            this.IsGradient = false;
            this._zero = 0;
            this.GradientColorMode = DxfGradientColorMode.TwoColorGradient;
            this.NumberOfColors = 0;
            this.GradientRotationAngle = 0.0;
            this.GradientDefinitionShift = 0.0;
            this.ColorTint = 0.0;
            this._reserved = 0.0;
            this.StringValue = "LINEAR";
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            pairs.Add(new DxfCodePair(100, "AcDbHatch"));
            pairs.Add(new DxfCodePair(10, ElevationPoint.X));
            pairs.Add(new DxfCodePair(20, ElevationPoint.Y));
            pairs.Add(new DxfCodePair(30, ElevationPoint.Z));
            pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
            pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
            pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            pairs.Add(new DxfCodePair(2, this.PatternName));
            pairs.Add(new DxfCodePair(70, (short)this.FillMode));
            pairs.Add(new DxfCodePair(71, BoolShort(this.IsAssociative)));
            pairs.Add(new DxfCodePair(91, BoundaryPaths.Count));
            foreach (var item in BoundaryPaths)
            {
                item.AddValuePairs(pairs, version, outputHandles);
            }

            pairs.Add(new DxfCodePair(75, (short)this.HatchStyle));
            pairs.Add(new DxfCodePair(76, (short)this.PatternType));
            if (FillMode == DxfHatchPatternFillMode.PatternFill)
            {
                pairs.Add(new DxfCodePair(52, this.PatternAngle));
            }

            if (FillMode == DxfHatchPatternFillMode.PatternFill)
            {
                pairs.Add(new DxfCodePair(41, this.PatternScale));
            }

            if (FillMode == DxfHatchPatternFillMode.PatternFill)
            {
                pairs.Add(new DxfCodePair(77, BoolShort(this.IsPatternDoubled)));
            }

            if (PatternDefinitionLines.Count != 0)
            {
                pairs.Add(new DxfCodePair(78, (short)PatternDefinitionLines.Count));
            }
            foreach (var item in PatternDefinitionLines)
            {
                pairs.Add(new DxfCodePair(53, item.Angle));
                pairs.Add(new DxfCodePair(43, item.BasePoint.X));
                pairs.Add(new DxfCodePair(44, item.BasePoint.Y));
                pairs.Add(new DxfCodePair(45, item.Offset.X));
                pairs.Add(new DxfCodePair(46, item.Offset.Y));
                pairs.Add(new DxfCodePair(79, (short)item.DashLengths.Count));
                foreach (var item1 in item.DashLengths)
                {
                    pairs.Add(new DxfCodePair(49, item1));
                }

            }

            if (IsAssociative)
            {
                pairs.Add(new DxfCodePair(47, this.PixelSize));
            }

            pairs.Add(new DxfCodePair(98, SeedPoints.Count));
            foreach (var item in SeedPoints)
            {
                pairs.Add(new DxfCodePair(10, item.X));
                pairs.Add(new DxfCodePair(20, item.Y));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(450, BoolInt(this.IsGradient)));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(451, this._zero));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(460, this.GradientRotationAngle));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(461, this.GradientDefinitionShift));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(452, (int)this.GradientColorMode));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(462, this.ColorTint));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(453, this.NumberOfColors));
            }

            if (version >= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(470, this.StringValue));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            return null;
        }
    }
}
