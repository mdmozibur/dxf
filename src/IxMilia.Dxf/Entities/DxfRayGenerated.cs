// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfRay class
    /// </summary>
    public partial class DxfRay : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ray; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R13; } }
        public DxfPoint StartPoint { get; set; }
        public DxfVector UnitDirectionVector { get; set; }

        public DxfRay()
            : base()
        {
        }

        public DxfRay(DxfPoint startPoint, DxfVector unitDirectionVector)
            : this()
        {
            this.StartPoint = startPoint;
            this.UnitDirectionVector = unitDirectionVector;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.StartPoint = DxfPoint.Origin;
            this.UnitDirectionVector = DxfVector.XAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbRay"));
            }
            pairs.Add(new DxfCodePair(10, StartPoint.X));
            pairs.Add(new DxfCodePair(20, StartPoint.Y));
            pairs.Add(new DxfCodePair(30, StartPoint.Z));
            pairs.Add(new DxfCodePair(11, UnitDirectionVector.X));
            pairs.Add(new DxfCodePair(21, UnitDirectionVector.Y));
            pairs.Add(new DxfCodePair(31, UnitDirectionVector.Z));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.StartPoint = this.StartPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    this.StartPoint = this.StartPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    this.StartPoint = this.StartPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 11:
                    this.UnitDirectionVector = this.UnitDirectionVector.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    this.UnitDirectionVector = this.UnitDirectionVector.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    this.UnitDirectionVector = this.UnitDirectionVector.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return StartPoint;
        }
    }
}
