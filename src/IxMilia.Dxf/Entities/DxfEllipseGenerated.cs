// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfEllipse class
    /// </summary>
    public partial class DxfEllipse : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Ellipse; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R13; } }
        public DxfPoint Center { get; set; }
        public DxfVector MajorAxis { get; set; }
        public DxfVector Normal { get; set; }
        public double MinorAxisRatio { get; set; }
        /// <summary>
        /// Ellipse start angle in radians
        /// </summary>
        public double StartParameter { get; set; }
        /// <summary>
        /// Ellipse end angle in radians
        /// </summary>
        public double EndParameter { get; set; }

        public DxfEllipse()
            : base()
        {
        }

        public DxfEllipse(DxfPoint center, DxfVector majorAxis, double minorAxisRatio)
            : this()
        {
            this.Center = center;
            this.MajorAxis = majorAxis;
            this.MinorAxisRatio = minorAxisRatio;
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Center = DxfPoint.Origin;
            this.MajorAxis = DxfVector.XAxis;
            this.Normal = DxfVector.ZAxis;
            this.MinorAxisRatio = 1.0;
            this.StartParameter = 0.0;
            this.EndParameter = Math.PI * 2;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbEllipse"));
            }
            pairs.Add(new DxfCodePair(10, Center.X));
            pairs.Add(new DxfCodePair(20, Center.Y));
            pairs.Add(new DxfCodePair(30, Center.Z));
            pairs.Add(new DxfCodePair(11, MajorAxis.X));
            pairs.Add(new DxfCodePair(21, MajorAxis.Y));
            pairs.Add(new DxfCodePair(31, MajorAxis.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            pairs.Add(new DxfCodePair(40, this.MinorAxisRatio));
            pairs.Add(new DxfCodePair(41, this.StartParameter));
            pairs.Add(new DxfCodePair(42, this.EndParameter));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.Center = this.Center.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    this.Center = this.Center.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    this.Center = this.Center.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 11:
                    this.MajorAxis = this.MajorAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    this.MajorAxis = this.MajorAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    this.MajorAxis = this.MajorAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 40:
                    this.MinorAxisRatio = pair.DoubleValue;
                    break;
                case 41:
                    this.StartParameter = pair.DoubleValue;
                    break;
                case 42:
                    this.EndParameter = pair.DoubleValue;
                    break;
                case 210:
                    this.Normal = this.Normal.WithUpdatedX(pair.DoubleValue);
                    break;
                case 220:
                    this.Normal = this.Normal.WithUpdatedY(pair.DoubleValue);
                    break;
                case 230:
                    this.Normal = this.Normal.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return this.GetPointFromAngle(StartParameter);
            yield return this.GetPointFromAngle(EndParameter);
            if (this.ContainsAngle(0.0))
            {
                yield return Center + MajorAxis;
            }
            if (this.ContainsAngle(90.0))
            {
                yield return Center + new DxfPoint(0.0, MajorAxis.Length * MinorAxisRatio, 0.0);
            }
            if (this.ContainsAngle(180.0))
            {
                yield return Center - MajorAxis;
            }
            if (this.ContainsAngle(270.0))
            {
                yield return Center + new DxfPoint(0.0, -MajorAxis.Length * MinorAxisRatio, 0.0);
            }
        }
    }
}
