// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfInsert class
    /// </summary>
    public partial class DxfInsert : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Insert; } }
        public bool HasAttributes { get; set; }
        public string Name { get; set; }
        public DxfPoint Location { get; set; }
        public double XScaleFactor { get; set; }
        public double YScaleFactor { get; set; }
        public double ZScaleFactor { get; set; }
        public double Rotation { get; set; }
        public short ColumnCount { get; set; }
        public short RowCount { get; set; }
        public double ColumnSpacing { get; set; }
        public double RowSpacing { get; set; }
        public DxfVector ExtrusionDirection { get; set; }

        public DxfInsert()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.HasAttributes = false;
            this.Name = null;
            this.Location = DxfPoint.Origin;
            this.XScaleFactor = 1.0;
            this.YScaleFactor = 1.0;
            this.ZScaleFactor = 1.0;
            this.Rotation = 0.0;
            this.ColumnCount = 1;
            this.RowCount = 1;
            this.ColumnSpacing = 0.0;
            this.RowSpacing = 0.0;
            this.ExtrusionDirection = DxfVector.ZAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbBlockReference"));
            }
            if (this.HasAttributes != false)
            {
                pairs.Add(new DxfCodePair(66, BoolShort(this.HasAttributes)));
            }

            pairs.Add(new DxfCodePair(2, this.Name));
            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            if (this.XScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, this.XScaleFactor));
            }

            if (this.YScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(42, this.YScaleFactor));
            }

            if (this.ZScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(43, this.ZScaleFactor));
            }

            if (this.Rotation != 0.0)
            {
                pairs.Add(new DxfCodePair(50, this.Rotation));
            }

            if (this.ColumnCount != 1)
            {
                pairs.Add(new DxfCodePair(70, this.ColumnCount));
            }

            if (this.RowCount != 1)
            {
                pairs.Add(new DxfCodePair(71, this.RowCount));
            }

            if (this.ColumnSpacing != 0.0)
            {
                pairs.Add(new DxfCodePair(44, this.ColumnSpacing));
            }

            if (this.RowSpacing != 0.0)
            {
                pairs.Add(new DxfCodePair(45, this.RowSpacing));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 2:
                    this.Name = pair.StringValue;
                    break;
                case 10:
                    this.Location = this.Location.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    this.Location = this.Location.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    this.Location = this.Location.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 41:
                    this.XScaleFactor = pair.DoubleValue;
                    break;
                case 42:
                    this.YScaleFactor = pair.DoubleValue;
                    break;
                case 43:
                    this.ZScaleFactor = pair.DoubleValue;
                    break;
                case 44:
                    this.ColumnSpacing = pair.DoubleValue;
                    break;
                case 45:
                    this.RowSpacing = pair.DoubleValue;
                    break;
                case 50:
                    this.Rotation = pair.DoubleValue;
                    break;
                case 66:
                    this.HasAttributes = BoolShort(pair.ShortValue);
                    break;
                case 70:
                    this.ColumnCount = pair.ShortValue;
                    break;
                case 71:
                    this.RowCount = pair.ShortValue;
                    break;
                case 210:
                    this.ExtrusionDirection = this.ExtrusionDirection.WithUpdatedX(pair.DoubleValue);
                    break;
                case 220:
                    this.ExtrusionDirection = this.ExtrusionDirection.WithUpdatedY(pair.DoubleValue);
                    break;
                case 230:
                    this.ExtrusionDirection = this.ExtrusionDirection.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}
