// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfAngularTwoLineDimension class
    /// </summary>
    public partial class DxfAngularTwoLineDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }
        public DxfPoint FirstExtensionLineP1 { get; set; }
        public DxfPoint FirstExtensionLineP2 { get; set; }
        public DxfPoint SecondExtensionLineP2 { get; set; }
        public DxfPoint DimensionLineArcLocation { get; set; }

        public DxfAngularTwoLineDimension()
            : base()
        {
        }

        internal DxfAngularTwoLineDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionType = DxfDimensionType.Angular;
            this.FirstExtensionLineP1 = DxfPoint.Origin;
            this.FirstExtensionLineP2 = DxfPoint.Origin;
            this.SecondExtensionLineP2 = DxfPoint.Origin;
            this.DimensionLineArcLocation = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDb2LineAngularDimension"));
            }
            pairs.Add(new DxfCodePair(13, FirstExtensionLineP1.X));
            pairs.Add(new DxfCodePair(23, FirstExtensionLineP1.Y));
            pairs.Add(new DxfCodePair(33, FirstExtensionLineP1.Z));
            pairs.Add(new DxfCodePair(14, FirstExtensionLineP2.X));
            pairs.Add(new DxfCodePair(24, FirstExtensionLineP2.Y));
            pairs.Add(new DxfCodePair(34, FirstExtensionLineP2.Z));
            pairs.Add(new DxfCodePair(15, SecondExtensionLineP2.X));
            pairs.Add(new DxfCodePair(25, SecondExtensionLineP2.Y));
            pairs.Add(new DxfCodePair(35, SecondExtensionLineP2.Z));
            pairs.Add(new DxfCodePair(16, DimensionLineArcLocation.X));
            pairs.Add(new DxfCodePair(26, DimensionLineArcLocation.Y));
            pairs.Add(new DxfCodePair(36, DimensionLineArcLocation.Z));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 13:
                    this.FirstExtensionLineP1 = this.FirstExtensionLineP1.WithUpdatedX(pair.DoubleValue);
                    break;
                case 23:
                    this.FirstExtensionLineP1 = this.FirstExtensionLineP1.WithUpdatedY(pair.DoubleValue);
                    break;
                case 33:
                    this.FirstExtensionLineP1 = this.FirstExtensionLineP1.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 14:
                    this.FirstExtensionLineP2 = this.FirstExtensionLineP2.WithUpdatedX(pair.DoubleValue);
                    break;
                case 24:
                    this.FirstExtensionLineP2 = this.FirstExtensionLineP2.WithUpdatedY(pair.DoubleValue);
                    break;
                case 34:
                    this.FirstExtensionLineP2 = this.FirstExtensionLineP2.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 15:
                    this.SecondExtensionLineP2 = this.SecondExtensionLineP2.WithUpdatedX(pair.DoubleValue);
                    break;
                case 25:
                    this.SecondExtensionLineP2 = this.SecondExtensionLineP2.WithUpdatedY(pair.DoubleValue);
                    break;
                case 35:
                    this.SecondExtensionLineP2 = this.SecondExtensionLineP2.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 16:
                    this.DimensionLineArcLocation = this.DimensionLineArcLocation.WithUpdatedX(pair.DoubleValue);
                    break;
                case 26:
                    this.DimensionLineArcLocation = this.DimensionLineArcLocation.WithUpdatedY(pair.DoubleValue);
                    break;
                case 36:
                    this.DimensionLineArcLocation = this.DimensionLineArcLocation.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return TextMidPoint;
            yield return FirstExtensionLineP1;
            yield return FirstExtensionLineP2;
            yield return SecondExtensionLineP1;
            yield return SecondExtensionLineP2;
            yield return DimensionLineArcLocation;
        }
    }
}
