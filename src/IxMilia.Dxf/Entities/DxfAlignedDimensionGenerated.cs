// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfAlignedDimension class
    /// </summary>
    public partial class DxfAlignedDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }
        public DxfPoint InsertionPoint { get; set; }
        public DxfPoint FirstPoint { get; set; }
        public DxfPoint SecondPoint { get; set; }

        public DxfAlignedDimension()
            : base()
        {
        }

        internal DxfAlignedDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionType = DxfDimensionType.Aligned;
            this.InsertionPoint = DxfPoint.Origin;
            this.FirstPoint = DxfPoint.Origin;
            this.SecondPoint = DxfPoint.Origin;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbAlignedDimension"));
            }
            if (IsBaselineAndContinue)
            {
                pairs.Add(new DxfCodePair(12, InsertionPoint.X));
                pairs.Add(new DxfCodePair(22, InsertionPoint.Y));
                pairs.Add(new DxfCodePair(32, InsertionPoint.Z));
            }

            pairs.Add(new DxfCodePair(13, FirstPoint.X));
            pairs.Add(new DxfCodePair(23, FirstPoint.Y));
            pairs.Add(new DxfCodePair(33, FirstPoint.Z));
            pairs.Add(new DxfCodePair(14, SecondPoint.X));
            pairs.Add(new DxfCodePair(24, SecondPoint.Y));
            pairs.Add(new DxfCodePair(34, SecondPoint.Z));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 12:
                    this.InsertionPoint = this.InsertionPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 22:
                    this.InsertionPoint = this.InsertionPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 32:
                    this.InsertionPoint = this.InsertionPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 13:
                    this.FirstPoint = this.FirstPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 23:
                    this.FirstPoint = this.FirstPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 33:
                    this.FirstPoint = this.FirstPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 14:
                    this.SecondPoint = this.SecondPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 24:
                    this.SecondPoint = this.SecondPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 34:
                    this.SecondPoint = this.SecondPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return DefinitionPoint;
            yield return TextMidPoint;
            yield return FirstPoint;
            yield return SecondPoint;
        }
    }
}
