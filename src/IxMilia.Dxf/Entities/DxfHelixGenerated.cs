// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfHelix class
    /// </summary>
    public partial class DxfHelix : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Helix; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2007; } }
        public int MajorReleaseNumber { get; set; }
        public int MaintenanceReleaseNumber { get; set; }
        public DxfPoint AxisBasePoint { get; set; }
        public DxfPoint StartPoint { get; set; }
        public DxfVector AxisVector { get; set; }
        public double Radius { get; set; }
        public double NumberOfTurns { get; set; }
        public double TurnHeight { get; set; }
        public bool IsRightHanded { get; set; }
        public DxfHelixConstraint Constraint { get; set; }

        public DxfHelix()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.MajorReleaseNumber = 0;
            this.MaintenanceReleaseNumber = 0;
            this.AxisBasePoint = DxfPoint.Origin;
            this.StartPoint = DxfPoint.Origin;
            this.AxisVector = DxfVector.ZAxis;
            this.Radius = 0.0;
            this.NumberOfTurns = 0.0;
            this.TurnHeight = 0.0;
            this.IsRightHanded = false;
            this.Constraint = DxfHelixConstraint.ConstrainTurnHeight;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbHelix"));
            }
            pairs.Add(new DxfCodePair(90, this.MajorReleaseNumber));
            pairs.Add(new DxfCodePair(91, this.MaintenanceReleaseNumber));
            pairs.Add(new DxfCodePair(10, AxisBasePoint.X));
            pairs.Add(new DxfCodePair(20, AxisBasePoint.Y));
            pairs.Add(new DxfCodePair(30, AxisBasePoint.Z));
            pairs.Add(new DxfCodePair(11, StartPoint.X));
            pairs.Add(new DxfCodePair(21, StartPoint.Y));
            pairs.Add(new DxfCodePair(31, StartPoint.Z));
            pairs.Add(new DxfCodePair(12, AxisVector.X));
            pairs.Add(new DxfCodePair(22, AxisVector.Y));
            pairs.Add(new DxfCodePair(32, AxisVector.Z));
            pairs.Add(new DxfCodePair(40, this.Radius));
            pairs.Add(new DxfCodePair(41, this.NumberOfTurns));
            pairs.Add(new DxfCodePair(42, this.TurnHeight));
            pairs.Add(new DxfCodePair(290, this.IsRightHanded));
            pairs.Add(new DxfCodePair(280, (short)this.Constraint));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.AxisBasePoint = this.AxisBasePoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    this.AxisBasePoint = this.AxisBasePoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    this.AxisBasePoint = this.AxisBasePoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 11:
                    this.StartPoint = this.StartPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    this.StartPoint = this.StartPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    this.StartPoint = this.StartPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 12:
                    this.AxisVector = this.AxisVector.WithUpdatedX(pair.DoubleValue);
                    break;
                case 22:
                    this.AxisVector = this.AxisVector.WithUpdatedY(pair.DoubleValue);
                    break;
                case 32:
                    this.AxisVector = this.AxisVector.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 40:
                    this.Radius = pair.DoubleValue;
                    break;
                case 41:
                    this.NumberOfTurns = pair.DoubleValue;
                    break;
                case 42:
                    this.TurnHeight = pair.DoubleValue;
                    break;
                case 90:
                    this.MajorReleaseNumber = pair.IntegerValue;
                    break;
                case 91:
                    this.MaintenanceReleaseNumber = pair.IntegerValue;
                    break;
                case 280:
                    this.Constraint = (DxfHelixConstraint)pair.ShortValue;
                    break;
                case 290:
                    this.IsRightHanded = pair.BoolValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}
