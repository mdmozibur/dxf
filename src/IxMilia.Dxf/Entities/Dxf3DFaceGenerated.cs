// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// Dxf3DFace class
    /// </summary>
    public partial class Dxf3DFace : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Face; } }
        public DxfPoint FirstCorner { get; set; }
        public DxfPoint SecondCorner { get; set; }
        public DxfPoint ThirdCorner { get; set; }
        public DxfPoint FourthCorner { get; set; }
        public int EdgeFlags { get; set; }

        // EdgeFlags flags

        public bool IsFirstEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 1); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                EdgeFlags = flags;
            }
        }

        public bool IsSecondEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 2); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                EdgeFlags = flags;
            }
        }

        public bool IsThirdEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 4); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                EdgeFlags = flags;
            }
        }

        public bool IsFourthEdgeInvisible
        {
            get { return DxfHelpers.GetFlag(EdgeFlags, 8); }
            set
            {
                var flags = EdgeFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                EdgeFlags = flags;
            }
        }

        public Dxf3DFace()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.FirstCorner = DxfPoint.Origin;
            this.SecondCorner = DxfPoint.Origin;
            this.ThirdCorner = DxfPoint.Origin;
            this.FourthCorner = DxfPoint.Origin;
            this.EdgeFlags = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbFace"));
            }
            pairs.Add(new DxfCodePair(10, FirstCorner.X));
            pairs.Add(new DxfCodePair(20, FirstCorner.Y));
            pairs.Add(new DxfCodePair(30, FirstCorner.Z));
            pairs.Add(new DxfCodePair(11, SecondCorner.X));
            pairs.Add(new DxfCodePair(21, SecondCorner.Y));
            pairs.Add(new DxfCodePair(31, SecondCorner.Z));
            pairs.Add(new DxfCodePair(12, ThirdCorner.X));
            pairs.Add(new DxfCodePair(22, ThirdCorner.Y));
            pairs.Add(new DxfCodePair(32, ThirdCorner.Z));
            pairs.Add(new DxfCodePair(13, FourthCorner.X));
            pairs.Add(new DxfCodePair(23, FourthCorner.Y));
            pairs.Add(new DxfCodePair(33, FourthCorner.Z));
            if (this.EdgeFlags != 0)
            {
                pairs.Add(new DxfCodePair(70, (short)this.EdgeFlags));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 10:
                    this.FirstCorner = this.FirstCorner.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    this.FirstCorner = this.FirstCorner.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    this.FirstCorner = this.FirstCorner.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 11:
                    this.SecondCorner = this.SecondCorner.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    this.SecondCorner = this.SecondCorner.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    this.SecondCorner = this.SecondCorner.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 12:
                    this.ThirdCorner = this.ThirdCorner.WithUpdatedX(pair.DoubleValue);
                    break;
                case 22:
                    this.ThirdCorner = this.ThirdCorner.WithUpdatedY(pair.DoubleValue);
                    break;
                case 32:
                    this.ThirdCorner = this.ThirdCorner.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 13:
                    this.FourthCorner = this.FourthCorner.WithUpdatedX(pair.DoubleValue);
                    break;
                case 23:
                    this.FourthCorner = this.FourthCorner.WithUpdatedY(pair.DoubleValue);
                    break;
                case 33:
                    this.FourthCorner = this.FourthCorner.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 70:
                    this.EdgeFlags = (int)pair.ShortValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return FirstCorner;
            yield return SecondCorner;
            yield return ThirdCorner;
            yield return FourthCorner;
        }
    }
}
