// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfProxyEntity class
    /// </summary>
    public partial class DxfProxyEntity : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.ProxyEntity; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R14; } }
        public int ProxyEntityClassId { get; set; }
        public int ApplicationEntityClassId { get; set; }
        private int _graphicsDataSize { get; set; }
        private IList<byte[]> _graphicsDataBytes { get; set; }
        private int _entityDataSize { get; set; }
        private IList<byte[]> _entityDataBytes { get; set; }
        public IList<string> ObjectID1 { get; private set; }
        public IList<string> ObjectID2 { get; private set; }
        public IList<string> ObjectID3 { get; private set; }
        public IList<string> ObjectID4 { get; private set; }
        public int Terminator { get; set; }
        private uint _objectDrawingFormat { get; set; }
        public bool OriginalDataFormatIsDxf { get; set; }

        public DxfProxyEntity()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ProxyEntityClassId = 498;
            this.ApplicationEntityClassId = 500;
            this._graphicsDataSize = 0;
            this._graphicsDataBytes = new ListNonNull<byte[]>();
            this._entityDataSize = 0;
            this._entityDataBytes = new ListNonNull<byte[]>();
            this.ObjectID1 = new ListNonNull<string>();
            this.ObjectID2 = new ListNonNull<string>();
            this.ObjectID3 = new ListNonNull<string>();
            this.ObjectID4 = new ListNonNull<string>();
            this.Terminator = 0;
            this._objectDrawingFormat = 0;
            this.OriginalDataFormatIsDxf = true;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            pairs.Add(new DxfCodePair(100, "AcDbProxyEntity"));
            pairs.Add(new DxfCodePair(90, this.ProxyEntityClassId));
            pairs.Add(new DxfCodePair(91, this.ApplicationEntityClassId));
            if ((GraphicsData?.Length ?? 0) > 0)
            {
                pairs.Add(new DxfCodePair(92, GraphicsData.Length));
                foreach (var chunk in BinaryHelpers.ChunkBytes(GraphicsData))
                {
                    pairs.Add(new DxfCodePair(310, chunk));
                }
            }

            if ((EntityData?.Length ?? 0) > 0)
            {
                pairs.Add(new DxfCodePair(93, EntityData.Length));
                foreach (var chunk in BinaryHelpers.ChunkBytes(EntityData))
                {
                    pairs.Add(new DxfCodePair(310, chunk));
                }
            }

            pairs.AddRange(this.ObjectID1.Select(p => new DxfCodePair(330, p)));
            pairs.AddRange(this.ObjectID2.Select(p => new DxfCodePair(340, p)));
            pairs.AddRange(this.ObjectID3.Select(p => new DxfCodePair(350, p)));
            pairs.AddRange(this.ObjectID4.Select(p => new DxfCodePair(360, p)));
            pairs.Add(new DxfCodePair(94, this.Terminator));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(95, (int)this._objectDrawingFormat));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(70, BoolShort(this.OriginalDataFormatIsDxf)));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    this.OriginalDataFormatIsDxf = BoolShort(pair.ShortValue);
                    break;
                case 90:
                    this.ProxyEntityClassId = pair.IntegerValue;
                    break;
                case 91:
                    this.ApplicationEntityClassId = pair.IntegerValue;
                    break;
                case 92:
                    this._graphicsDataSize = pair.IntegerValue;
                    break;
                case 93:
                    this._entityDataSize = pair.IntegerValue;
                    break;
                case 94:
                    this.Terminator = pair.IntegerValue;
                    break;
                case 95:
                    this._objectDrawingFormat = (uint)pair.IntegerValue;
                    break;
                case 310:
                    // code is custom-handled and shared by properties _graphicsDataBytes, _entityDataBytes
                    break;
                case 330:
                    this.ObjectID1.Add(pair.StringValue);
                    break;
                case 340:
                    this.ObjectID2.Add(pair.StringValue);
                    break;
                case 350:
                    this.ObjectID3.Add(pair.StringValue);
                    break;
                case 360:
                    this.ObjectID4.Add(pair.StringValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            return null;
        }
    }
}
