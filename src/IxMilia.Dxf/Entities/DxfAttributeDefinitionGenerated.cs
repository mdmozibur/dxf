// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfAttributeDefinition class
    /// </summary>
    public partial class DxfAttributeDefinition : DxfEntity, IDxfItemInternal
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.AttributeDefinition; } }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            foreach (var pointer in SecondaryAttributesPointers.Pointers)
            {
                yield return pointer;
            }
            yield return MTextPointer;
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }

        internal DxfPointerList<IDxfItem> SecondaryAttributesPointers { get; } = new DxfPointerList<IDxfItem>();
        internal DxfPointer MTextPointer { get; } = new DxfPointer();
        public double Thickness { get; set; }
        public DxfPoint Location { get; set; }
        public double TextHeight { get; set; }
        public string Value { get; set; }
        public double Rotation { get; set; }
        public double RelativeXScaleFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public string TextStyleName { get; set; }
        public int TextGenerationFlags { get; set; }
        public DxfHorizontalTextJustification HorizontalTextJustification { get; set; }
        public DxfPoint SecondAlignmentPoint { get; set; }
        public DxfVector Normal { get; set; }
        public DxfVersion Version { get; set; }
        public string Prompt { get; set; }
        public string TextTag { get; set; }
        public int Flags { get; set; }
        public short FieldLength { get; set; }
        public DxfVerticalTextJustification VerticalTextJustification { get; set; }
        public bool IsLockedInBlock { get; set; }
        public bool KeepDuplicateRecords { get; set; }
        public DxfMTextFlag MTextFlag { get; set; }
        public bool IsReallyLocked { get; set; }
        private int _secondaryAttributeCount { get; set; }
        public IList<IDxfItem> SecondaryAttributes { get { return SecondaryAttributesPointers; } }
        public DxfPoint AlignmentPoint { get; set; }
        public double AnnotationScale { get; set; }
        public string XRecordTag { get; set; }
        public DxfMText MText { get { return MTextPointer.Item as DxfMText; } set { MTextPointer.Item = value; } }

        // TextGenerationFlags flags

        public bool IsTextBackward
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 2); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                TextGenerationFlags = flags;
            }
        }

        public bool IsTextUpsideDown
        {
            get { return DxfHelpers.GetFlag(TextGenerationFlags, 4); }
            set
            {
                var flags = TextGenerationFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                TextGenerationFlags = flags;
            }
        }

        // Flags flags

        public bool IsInvisible
        {
            get { return DxfHelpers.GetFlag(Flags, 1); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                Flags = flags;
            }
        }

        public bool IsConstant
        {
            get { return DxfHelpers.GetFlag(Flags, 2); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                Flags = flags;
            }
        }

        public bool IsInputVerificationRequired
        {
            get { return DxfHelpers.GetFlag(Flags, 4); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                Flags = flags;
            }
        }

        public bool IsAttributePresent
        {
            get { return DxfHelpers.GetFlag(Flags, 8); }
            set
            {
                var flags = Flags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                Flags = flags;
            }
        }

        public DxfAttributeDefinition()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Thickness = 0.0;
            this.Location = DxfPoint.Origin;
            this.TextHeight = 1.0;
            this.Value = null;
            this.Rotation = 0;
            this.RelativeXScaleFactor = 1.0;
            this.ObliqueAngle = 0.0;
            this.TextStyleName = "STANDARD";
            this.TextGenerationFlags = 0;
            this.HorizontalTextJustification = DxfHorizontalTextJustification.Left;
            this.SecondAlignmentPoint = DxfPoint.Origin;
            this.Normal = DxfVector.ZAxis;
            this.Version = DxfVersion.R2010;
            this.Prompt = null;
            this.TextTag = null;
            this.Flags = 0;
            this.FieldLength = 0;
            this.VerticalTextJustification = DxfVerticalTextJustification.Baseline;
            this.IsLockedInBlock = false;
            this.KeepDuplicateRecords = false;
            this.MTextFlag = DxfMTextFlag.MultilineAttribute;
            this.IsReallyLocked = false;
            this._secondaryAttributeCount = 0;
            this.AlignmentPoint = DxfPoint.Origin;
            this.AnnotationScale = 1.0;
            this.XRecordTag = null;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbText"));
            }
            if (this.Thickness != 0.0)
            {
                pairs.Add(new DxfCodePair(39, this.Thickness));
            }

            pairs.Add(new DxfCodePair(10, Location.X));
            pairs.Add(new DxfCodePair(20, Location.Y));
            pairs.Add(new DxfCodePair(30, Location.Z));
            pairs.Add(new DxfCodePair(40, this.TextHeight));
            pairs.Add(new DxfCodePair(1, this.Value));
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbAttributeDefinition"));
            }
            if (this.Rotation != 0)
            {
                pairs.Add(new DxfCodePair(50, this.Rotation));
            }

            if (this.RelativeXScaleFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, this.RelativeXScaleFactor));
            }

            if (this.ObliqueAngle != 0.0)
            {
                pairs.Add(new DxfCodePair(51, this.ObliqueAngle));
            }

            if (this.TextStyleName != "STANDARD")
            {
                pairs.Add(new DxfCodePair(7, this.TextStyleName));
            }

            if (this.TextGenerationFlags != 0)
            {
                pairs.Add(new DxfCodePair(71, (short)this.TextGenerationFlags));
            }

            if (this.HorizontalTextJustification != DxfHorizontalTextJustification.Left)
            {
                pairs.Add(new DxfCodePair(72, (short)this.HorizontalTextJustification));
            }

            pairs.Add(new DxfCodePair(11, SecondAlignmentPoint.X));
            pairs.Add(new DxfCodePair(21, SecondAlignmentPoint.Y));
            pairs.Add(new DxfCodePair(31, SecondAlignmentPoint.Z));
            if (this.Normal != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, Normal.X));
                pairs.Add(new DxfCodePair(220, Normal.Y));
                pairs.Add(new DxfCodePair(230, Normal.Z));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbAttributeDefinition"));
            }
            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(280, (short)this.Version));
            }

            pairs.Add(new DxfCodePair(3, this.Prompt));
            pairs.Add(new DxfCodePair(2, this.TextTag));
            pairs.Add(new DxfCodePair(70, (short)this.Flags));
            if (this.FieldLength != 0)
            {
                pairs.Add(new DxfCodePair(73, this.FieldLength));
            }

            if (version >= DxfAcadVersion.R12 && this.VerticalTextJustification != DxfVerticalTextJustification.Baseline)
            {
                pairs.Add(new DxfCodePair(74, (short)this.VerticalTextJustification));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(280, BoolShort(this.IsLockedInBlock)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(100, "AcDbXrecord"));
            }
            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(280, BoolShort(this.KeepDuplicateRecords)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(70, (short)this.MTextFlag));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(70, BoolShort(this.IsReallyLocked)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(70, (short)SecondaryAttributes.Count));
            }
            if (version >= DxfAcadVersion.R2007)
            {
                pairs.AddRange(this.SecondaryAttributesPointers.Pointers.Where(p => p.Handle.Value != 0).Select(p => new DxfCodePair(340, DxfCommonConverters.HandleString(p.Handle))));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(10, AlignmentPoint.X));
                pairs.Add(new DxfCodePair(20, AlignmentPoint.Y));
                pairs.Add(new DxfCodePair(30, AlignmentPoint.Z));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(40, this.AnnotationScale));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(2, this.XRecordTag));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return Location;
            yield return SecondAlignmentPoint;
            yield return AlignmentPoint;
        }
    }
}
