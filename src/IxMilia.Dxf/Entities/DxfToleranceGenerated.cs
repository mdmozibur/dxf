// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfTolerance class
    /// </summary>
    public partial class DxfTolerance : DxfEntity
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Tolerance; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R13; } }
        public string DimensionStyleName { get; set; }
        public DxfPoint InsertionPoint { get; set; }
        public string DisplayText { get; set; }
        public DxfVector ExtrusionDirection { get; set; }
        public DxfVector DirectionVector { get; set; }

        public DxfTolerance()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionStyleName = null;
            this.InsertionPoint = DxfPoint.Origin;
            this.DisplayText = null;
            this.ExtrusionDirection = DxfVector.ZAxis;
            this.DirectionVector = DxfVector.XAxis;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbFcf"));
            }
            pairs.Add(new DxfCodePair(3, this.DimensionStyleName));
            pairs.Add(new DxfCodePair(10, InsertionPoint.X));
            pairs.Add(new DxfCodePair(20, InsertionPoint.Y));
            pairs.Add(new DxfCodePair(30, InsertionPoint.Z));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(1, this.DisplayText));
            }

            if (this.ExtrusionDirection != DxfVector.ZAxis)
            {
                pairs.Add(new DxfCodePair(210, ExtrusionDirection.X));
                pairs.Add(new DxfCodePair(220, ExtrusionDirection.Y));
                pairs.Add(new DxfCodePair(230, ExtrusionDirection.Z));
            }

            pairs.Add(new DxfCodePair(11, DirectionVector.X));
            pairs.Add(new DxfCodePair(21, DirectionVector.Y));
            pairs.Add(new DxfCodePair(31, DirectionVector.Z));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.DisplayText = pair.StringValue;
                    break;
                case 3:
                    this.DimensionStyleName = pair.StringValue;
                    break;
                case 10:
                    this.InsertionPoint = this.InsertionPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    this.InsertionPoint = this.InsertionPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    this.InsertionPoint = this.InsertionPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 11:
                    this.DirectionVector = this.DirectionVector.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    this.DirectionVector = this.DirectionVector.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    this.DirectionVector = this.DirectionVector.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 210:
                    this.ExtrusionDirection = this.ExtrusionDirection.WithUpdatedX(pair.DoubleValue);
                    break;
                case 220:
                    this.ExtrusionDirection = this.ExtrusionDirection.WithUpdatedY(pair.DoubleValue);
                    break;
                case 230:
                    this.ExtrusionDirection = this.ExtrusionDirection.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return InsertionPoint;
        }
    }
}
