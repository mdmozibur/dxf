// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Objects;

namespace IxMilia.Dxf.Entities
{
    /// <summary>
    /// DxfRadialDimension class
    /// </summary>
    public partial class DxfRadialDimension : DxfDimensionBase
    {
        public override DxfEntityType EntityType { get { return DxfEntityType.Dimension; } }
        public DxfPoint AngleVertex { get; set; }
        public double LeaderLength { get; set; }

        public DxfRadialDimension()
            : base()
        {
        }

        internal DxfRadialDimension(DxfDimensionBase other)
            : base(other)
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.DimensionType = DxfDimensionType.Radius;
            this.AngleVertex = DxfPoint.Origin;
            this.LeaderLength = 0.0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbRadialDimension"));
            }
            pairs.Add(new DxfCodePair(15, AngleVertex.X));
            pairs.Add(new DxfCodePair(25, AngleVertex.Y));
            pairs.Add(new DxfCodePair(35, AngleVertex.Z));
            pairs.Add(new DxfCodePair(40, this.LeaderLength));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 15:
                    this.AngleVertex = this.AngleVertex.WithUpdatedX(pair.DoubleValue);
                    break;
                case 25:
                    this.AngleVertex = this.AngleVertex.WithUpdatedY(pair.DoubleValue);
                    break;
                case 35:
                    this.AngleVertex = this.AngleVertex.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 40:
                    this.LeaderLength = pair.DoubleValue;
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }

        protected override IEnumerable<DxfPoint> GetExtentsPoints()
        {
            yield return DefinitionPoint;
            yield return TextMidPoint;
            yield return AngleVertex;
        }
    }
}
