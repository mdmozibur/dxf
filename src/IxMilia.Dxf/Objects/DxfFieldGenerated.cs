// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfField class
    /// </summary>
    public partial class DxfField : DxfObject, IDxfItemInternal
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.Field; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2004; } }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            foreach (var pointer in ChildFieldsPointers.Pointers)
            {
                yield return pointer;
            }
            foreach (var pointer in ObjectsPointers.Pointers)
            {
                yield return pointer;
            }
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }

        internal DxfPointerList<DxfField> ChildFieldsPointers { get; } = new DxfPointerList<DxfField>();
        internal DxfPointerList<DxfObject> ObjectsPointers { get; } = new DxfPointerList<DxfObject>();
        public string EvaluatorId { get; set; }
        public string FieldCodeString { get; set; }
        public string FieldCodeStringOverflow { get; set; }
        private string _formatStringCode4 { get; set; }
        public string EvaluationErrorMessage { get; set; }
        private int _childFieldCount { get; set; }
        public IList<DxfField> ChildFields { get { return ChildFieldsPointers; } }
        public int EvaluationOption { get; set; }
        public int FillingOption { get; set; }
        public int FieldState { get; set; }
        public int EvaluationStatus { get; set; }
        public int EvaluationErrorCode { get; set; }
        private int _objectIdCount { get; set; }
        public IList<DxfObject> Objects { get { return ObjectsPointers; } }
        private int _dataSetCount { get; set; }
        public IList<string> FieldDataKeys { get; private set; }
        public string EvaluatedCacheKey { get; protected set; }
        private int _valueTypeCode { get; set; }
        private int _longValue { get; set; }
        private double _doubleValue { get; set; }
        private DxfHandle _idValue { get; set; }
        private int _binaryDataBufferSize { get; set; }
        private IList<byte[]> _binaryData { get; set; }
        private string _formatStringCode301 { get; set; }
        private string _formatStringOverflow { get; set; }
        private int _formatStringLength { get; set; }
        private IList<int> _childFieldCount_valueTypeCode { get; set; }

        public DxfField()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.EvaluatorId = null;
            this.FieldCodeString = null;
            this.FieldCodeStringOverflow = null;
            this._formatStringCode4 = null;
            this.EvaluationErrorMessage = null;
            this._childFieldCount = 0;
            this.EvaluationOption = 0;
            this.FillingOption = 0;
            this.FieldState = 0;
            this.EvaluationStatus = 0;
            this.EvaluationErrorCode = 0;
            this._objectIdCount = 0;
            this._dataSetCount = 0;
            this.FieldDataKeys = new ListNonNull<string>();
            this.EvaluatedCacheKey = "ACFD_FIELD_VALUE";
            this._valueTypeCode = 0;
            this._longValue = 0;
            this._doubleValue = 0.0;
            this._idValue = default(DxfHandle);
            this._binaryDataBufferSize = 0;
            this._binaryData = new ListNonNull<byte[]>();
            this._formatStringCode301 = null;
            this._formatStringOverflow = null;
            this._formatStringLength = 0;
            this._childFieldCount_valueTypeCode = new ListNonNull<int>();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            pairs.Add(new DxfCodePair(1, this.EvaluatorId));
            pairs.Add(new DxfCodePair(2, this.FieldCodeString));
            pairs.Add(new DxfCodePair(3, this.FieldCodeStringOverflow));
            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(4, FormatString));
            }
            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(300, this.EvaluationErrorMessage));
            }

            pairs.Add(new DxfCodePair(90, ChildFields.Count));
            pairs.AddRange(this.ChildFieldsPointers.Pointers.Where(p => p.Handle.Value != 0).Select(p => new DxfCodePair(360, DxfCommonConverters.HandleString(p.Handle))));
            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(91, this.EvaluationOption));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(92, this.FillingOption));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(94, this.FieldState));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(95, this.EvaluationStatus));
            }

            if (version <= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(96, this.EvaluationErrorCode));
            }

            pairs.Add(new DxfCodePair(97, Objects.Count));
            foreach (var item in ObjectsPointers.Pointers)
            {
                if (version <= DxfAcadVersion.R2007)
                {
                    pairs.Add(new DxfCodePair(330, HandleString(item.Handle)));
                }
                if (version >= DxfAcadVersion.R2010)
                {
                    pairs.Add(new DxfCodePair(331, HandleString(item.Handle)));
                }
            }

            pairs.Add(new DxfCodePair(93, FieldDataKeys.Count));
            pairs.AddRange(this.FieldDataKeys.Select(p => new DxfCodePair(6, p)));
            pairs.Add(new DxfCodePair(7, this.EvaluatedCacheKey));
            pairs.Add(new DxfCodePair(90, _valueTypeCode));
            pairs.Add(new DxfCodePair(_valueTypeCode, Value));
            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(301, FormatString));
            }
            pairs.Add(new DxfCodePair(9, this._formatStringOverflow));
            pairs.Add(new DxfCodePair(98, FormatString?.Length ?? default(int)));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        // This object has vales that share codes between properties and these counters are used to know which property to
        // assign to in TrySetPair() below.
        private int _code_91_index = 0; // shared by properties EvaluationOption, _longValue
        private int _code_92_index = 0; // shared by properties FillingOption, _binaryDataBufferSize

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case -90:
                    // code is custom-handled and shared by properties _childFieldCount, _valueTypeCode
                    break;
                case 1:
                    this.EvaluatorId = pair.StringValue;
                    break;
                case 2:
                    this.FieldCodeString = pair.StringValue;
                    break;
                case 3:
                    this.FieldCodeStringOverflow = pair.StringValue;
                    break;
                case 4:
                    this._formatStringCode4 = pair.StringValue;
                    break;
                case 6:
                    this.FieldDataKeys.Add(pair.StringValue);
                    break;
                case 9:
                    this._formatStringOverflow = pair.StringValue;
                    break;
                case 90:
                    this._childFieldCount_valueTypeCode.Add(pair.IntegerValue);
                    break;
                case 91:
                    switch (_code_91_index)
                    {
                        case 0:
                            this.EvaluationOption = pair.IntegerValue;
                            _code_91_index++;
                            break;
                        case 1:
                            this._longValue = pair.IntegerValue;
                            _code_91_index++;
                            break;
                        default:
                            Debug.Assert(false, "Unexpected extra values for code 91");
                            break;
                    }
                    break;
                case 92:
                    switch (_code_92_index)
                    {
                        case 0:
                            this.FillingOption = pair.IntegerValue;
                            _code_92_index++;
                            break;
                        case 1:
                            this._binaryDataBufferSize = pair.IntegerValue;
                            _code_92_index++;
                            break;
                        default:
                            Debug.Assert(false, "Unexpected extra values for code 92");
                            break;
                    }
                    break;
                case 93:
                    this._dataSetCount = pair.IntegerValue;
                    break;
                case 94:
                    this.FieldState = pair.IntegerValue;
                    break;
                case 95:
                    this.EvaluationStatus = pair.IntegerValue;
                    break;
                case 96:
                    this.EvaluationErrorCode = pair.IntegerValue;
                    break;
                case 97:
                    this._objectIdCount = pair.IntegerValue;
                    break;
                case 98:
                    this._formatStringLength = pair.IntegerValue;
                    break;
                case 140:
                    this._doubleValue = pair.DoubleValue;
                    break;
                case 300:
                    this.EvaluationErrorMessage = pair.StringValue;
                    break;
                case 301:
                    this._formatStringCode301 = pair.StringValue;
                    break;
                case 310:
                    this._binaryData.Add(pair.BinaryValue);
                    break;
                case 330:
                    this._idValue = HandleString(pair.StringValue);
                    break;
                case 331:
                    this.ObjectsPointers.Pointers.Add(new DxfPointer(DxfCommonConverters.HandleString(pair.StringValue)));
                    break;
                case 360:
                    this.ChildFieldsPointers.Pointers.Add(new DxfPointer(DxfCommonConverters.HandleString(pair.StringValue)));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}
