// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfGroup class
    /// </summary>
    public partial class DxfGroup : DxfObject, IDxfItemInternal
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.Group; } }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            foreach (var pointer in EntitiesPointers.Pointers)
            {
                yield return pointer;
            }
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }

        internal DxfPointerList<DxfEntity> EntitiesPointers { get; } = new DxfPointerList<DxfEntity>();
        public string Description { get; set; }
        public bool IsNamed { get; set; }
        public bool IsSelectable { get; set; }
        public IList<DxfEntity> Entities { get { return EntitiesPointers; } }

        public DxfGroup()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Description = null;
            this.IsNamed = true;
            this.IsSelectable = true;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbGroup"));
            }
            pairs.Add(new DxfCodePair(300, this.Description));
            pairs.Add(new DxfCodePair(70, BoolShort(!this.IsNamed)));
            pairs.Add(new DxfCodePair(71, BoolShort(this.IsSelectable)));
            pairs.AddRange(this.EntitiesPointers.Pointers.Where(p => p.Handle.Value != 0).Select(p => new DxfCodePair(340, DxfCommonConverters.HandleString(p.Handle))));
            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    this.IsNamed = !BoolShort(pair.ShortValue);
                    break;
                case 71:
                    this.IsSelectable = BoolShort(pair.ShortValue);
                    break;
                case 300:
                    this.Description = pair.StringValue;
                    break;
                case 340:
                    this.EntitiesPointers.Pointers.Add(new DxfPointer(DxfCommonConverters.HandleString(pair.StringValue)));
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}
