// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfLayout class
    /// </summary>
    public partial class DxfLayout : DxfPlotSettings, IDxfItemInternal
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.Layout; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2000; } }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            yield return BlockRecordPointer;
            yield return ViewportPointer;
            yield return TableRecordPointer;
            yield return TableRecordBasePointer;
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }

        internal DxfPointer BlockRecordPointer { get; } = new DxfPointer();
        internal DxfPointer ViewportPointer { get; } = new DxfPointer();
        internal DxfPointer TableRecordPointer { get; } = new DxfPointer();
        internal DxfPointer TableRecordBasePointer { get; } = new DxfPointer();
        private string _layoutName { get; set; }
        public int LayoutFlags { get; set; }
        public int TabOrder { get; set; }
        public DxfPoint MinimumLimits { get; set; }
        public DxfPoint MaximumLimits { get; set; }
        public DxfPoint InsertionBasePoint { get; set; }
        public DxfPoint MinimumExtents { get; set; }
        public DxfPoint MaximumExtents { get; set; }
        public double Elevation { get; set; }
        public DxfPoint UcsOrigin { get; set; }
        public DxfVector UcsXAxis { get; set; }
        public DxfVector UcsYAxis { get; set; }
        public DxfUcsOrthographicType UcsOrthographicType { get; set; }
        public IDxfItem BlockRecord { get { return BlockRecordPointer.Item as IDxfItem; } set { BlockRecordPointer.Item = value; } }
        public IDxfItem Viewport { get { return ViewportPointer.Item as IDxfItem; } set { ViewportPointer.Item = value; } }
        public IDxfItem TableRecord { get { return TableRecordPointer.Item as IDxfItem; } set { TableRecordPointer.Item = value; } }
        public IDxfItem TableRecordBase { get { return TableRecordBasePointer.Item as IDxfItem; } set { TableRecordBasePointer.Item = value; } }

        // LayoutFlags flags

        public bool IsPsLtScale
        {
            get { return DxfHelpers.GetFlag(LayoutFlags, 1); }
            set
            {
                var flags = LayoutFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                LayoutFlags = flags;
            }
        }

        public bool IsLimCheck
        {
            get { return DxfHelpers.GetFlag(LayoutFlags, 2); }
            set
            {
                var flags = LayoutFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                LayoutFlags = flags;
            }
        }

        internal DxfLayout()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this._layoutName = null;
            this.LayoutFlags = 0;
            this.TabOrder = 0;
            this.MinimumLimits = DxfPoint.Origin;
            this.MaximumLimits = DxfPoint.Origin;
            this.InsertionBasePoint = DxfPoint.Origin;
            this.MinimumExtents = DxfPoint.Origin;
            this.MaximumExtents = DxfPoint.Origin;
            this.Elevation = 0.0;
            this.UcsOrigin = DxfPoint.Origin;
            this.UcsXAxis = DxfVector.XAxis;
            this.UcsYAxis = DxfVector.YAxis;
            this.UcsOrthographicType = DxfUcsOrthographicType.NotOrthographic;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, "AcDbLayout"));
            }
            pairs.Add(new DxfCodePair(1, this._layoutName));
            pairs.Add(new DxfCodePair(70, (short)this.LayoutFlags));
            pairs.Add(new DxfCodePair(71, (short)this.TabOrder));
            pairs.Add(new DxfCodePair(10, MinimumLimits.X));
            pairs.Add(new DxfCodePair(20, MinimumLimits.Y));
            pairs.Add(new DxfCodePair(11, MaximumLimits.X));
            pairs.Add(new DxfCodePair(21, MaximumLimits.Y));
            pairs.Add(new DxfCodePair(12, InsertionBasePoint.X));
            pairs.Add(new DxfCodePair(22, InsertionBasePoint.Y));
            pairs.Add(new DxfCodePair(32, InsertionBasePoint.Z));
            pairs.Add(new DxfCodePair(14, MinimumExtents.X));
            pairs.Add(new DxfCodePair(24, MinimumExtents.Y));
            pairs.Add(new DxfCodePair(34, MinimumExtents.Z));
            pairs.Add(new DxfCodePair(15, MaximumExtents.X));
            pairs.Add(new DxfCodePair(25, MaximumExtents.Y));
            pairs.Add(new DxfCodePair(35, MaximumExtents.Z));
            pairs.Add(new DxfCodePair(146, this.Elevation));
            pairs.Add(new DxfCodePair(13, UcsOrigin.X));
            pairs.Add(new DxfCodePair(23, UcsOrigin.Y));
            pairs.Add(new DxfCodePair(33, UcsOrigin.Z));
            pairs.Add(new DxfCodePair(16, UcsXAxis.X));
            pairs.Add(new DxfCodePair(26, UcsXAxis.Y));
            pairs.Add(new DxfCodePair(36, UcsXAxis.Z));
            pairs.Add(new DxfCodePair(17, UcsYAxis.X));
            pairs.Add(new DxfCodePair(27, UcsYAxis.Y));
            pairs.Add(new DxfCodePair(37, UcsYAxis.Z));
            pairs.Add(new DxfCodePair(76, (short)this.UcsOrthographicType));
            if (this.BlockRecordPointer.Handle.Value != 0)
            {
                pairs.Add(new DxfCodePair(330, DxfCommonConverters.HandleString(this.BlockRecordPointer.Handle)));
            }

            if (this.ViewportPointer.Handle.Value != 0)
            {
                pairs.Add(new DxfCodePair(331, DxfCommonConverters.HandleString(this.ViewportPointer.Handle)));
            }

            if (this.TableRecordPointer.Handle.Value != 0)
            {
                pairs.Add(new DxfCodePair(345, DxfCommonConverters.HandleString(this.TableRecordPointer.Handle)));
            }

            if (this.TableRecordBasePointer.Handle.Value != 0)
            {
                pairs.Add(new DxfCodePair(346, DxfCommonConverters.HandleString(this.TableRecordBasePointer.Handle)));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }
    }
}
