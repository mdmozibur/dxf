// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfMaterial class
    /// </summary>
    public partial class DxfMaterial : DxfObject
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.Material; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2004; } }
        public string Name { get; set; }
        public string Description { get; set; }
        public bool OverrideAmbientColor { get; set; }
        public double AmbientColorFactor { get; set; }
        public int AmbientColorValue { get; set; }
        public bool OverrideDiffuseColor { get; set; }
        public double DiffuseColorFactor { get; set; }
        public int DiffuseColorValue { get; set; }
        public double DiffuseMapBlendFactor { get; set; }
        public bool UseImageFileForDiffuseMap { get; set; }
        public string DiffuseMapFileName { get; set; }
        public DxfMapProjectionMethod DiffuseMapProjectionMethod { get; set; }
        public DxfMapTilingMethod DiffuseMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod DiffuseMapAutoTransformMethod { get; set; }
        private IList<double> _diffuseMapTransformMatrixValues { get; set; }
        public double SpecularGlossFactor { get; set; }
        public bool OverrideSpecularColor { get; set; }
        public double SpecularColorFactor { get; set; }
        public int SpecularColorValue { get; set; }
        public double SpecularMapBlendFactor { get; set; }
        public bool UseImageFileForSpecularMap { get; set; }
        public string SpecularMapFileName { get; set; }
        public DxfMapProjectionMethod SpecularMapProjectionMethod { get; set; }
        public DxfMapTilingMethod SpecularMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod SpecularMapAutoTransformMethod { get; set; }
        private IList<double> _specularMapTransformMatrixValues { get; set; }
        public double ReflectionMapBlendFactor { get; set; }
        public bool UseImageFileForReflectionMap { get; set; }
        public string ReflectionMapFileName { get; set; }
        public DxfMapProjectionMethod ReflectionMapProjectionMethod { get; set; }
        public DxfMapTilingMethod ReflectionMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod ReflectionMapAutoTransformMethod { get; set; }
        private IList<double> _reflectionMapTransformMatrixValues { get; set; }
        public double OpacityFactor { get; set; }
        public double OpacityMapBlendFactor { get; set; }
        public bool UseImageFileForOpacityMap { get; set; }
        public string OpacityMapFileName { get; set; }
        public DxfMapProjectionMethod OpacityMapProjectionMethod { get; set; }
        public DxfMapTilingMethod OpacityMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod OpacityMapAutoTransformMethod { get; set; }
        private IList<double> _opacityMapTransformMatrixValues { get; set; }
        public double BumpMapBlendFactor { get; set; }
        public bool UseImageFileForBumpMap { get; set; }
        public string BumpMapFileName { get; set; }
        public DxfMapProjectionMethod BumpMapProjectionMethod { get; set; }
        public DxfMapTilingMethod BumpMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod BumpMapAutoTransformMethod { get; set; }
        private IList<double> _bumpMapTransformMatrixValues { get; set; }
        public double RefractionIndex { get; set; }
        public double RefractionMapBlendFactor { get; set; }
        public bool UseImageFileForRefractionMap { get; set; }
        public string RefractionMapFileName { get; set; }
        public DxfMapProjectionMethod RefractionMapProjectionMethod { get; set; }
        public DxfMapTilingMethod RefractionMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod RefractionMapAutoTransformMethod { get; set; }
        private IList<double> _refractionMapTransformMatrixValues { get; set; }
        public double ColorBleedScale { get; set; }
        public double IndirectDumpScale { get; set; }
        public double ReflectanceScale { get; set; }
        public double TransmittanceScale { get; set; }
        public bool IsTwoSided { get; set; }
        public double Luminance { get; set; }
        public short LuminanceMode { get; set; }
        public short NormalMapMethod { get; set; }
        public double NormalMapStrength { get; set; }
        public double NormalMapBlendFactor { get; set; }
        public bool UseImageFileForNormalMap { get; set; }
        public string NormalMapFileName { get; set; }
        public DxfMapProjectionMethod NormalMapProjectionMethod { get; set; }
        public DxfMapTilingMethod NormalMapTilingMethod { get; set; }
        public DxfMapAutoTransformMethod NormalMapAutoTransformMethod { get; set; }
        private IList<double> _normalMapTransformMatrixValues { get; set; }
        public bool IsAnonymous { get; set; }
        public short GlobalIlluminationMode { get; set; }
        public short FinalGatherMode { get; set; }
        public string GenProcName { get; set; }
        public bool GenProcBooleanValue { get; set; }
        public short GenProcIntegerValue { get; set; }
        public double GenProcRealValue { get; set; }
        public string GenProcTextValue { get; set; }
        public bool GenProcTableEnd { get; set; }
        public DxfColor GenProcColorIndexValue { get; set; }
        public int GenProcColorRGBValue { get; set; }
        public string GenProcColorName { get; set; }
        public short MapUTile { get; set; }
        public short MapVTile { get; set; }
        public double Translucence { get; set; }
        public int SelfIllumination { get; set; }
        public double Reflectivity { get; set; }
        public int IlluminationModel { get; set; }
        public int ChannelFlags { get; set; }

        public DxfMaterial()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.Name = null;
            this.Description = null;
            this.OverrideAmbientColor = false;
            this.AmbientColorFactor = 1.0;
            this.AmbientColorValue = 0;
            this.OverrideDiffuseColor = false;
            this.DiffuseColorFactor = 1.0;
            this.DiffuseColorValue = 0;
            this.DiffuseMapBlendFactor = 1.0;
            this.UseImageFileForDiffuseMap = false;
            this.DiffuseMapFileName = null;
            this.DiffuseMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.DiffuseMapTilingMethod = DxfMapTilingMethod.Tile;
            this.DiffuseMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._diffuseMapTransformMatrixValues = new ListNonNull<double>();
            this.SpecularGlossFactor = 0.5;
            this.OverrideSpecularColor = false;
            this.SpecularColorFactor = 1.0;
            this.SpecularColorValue = 0;
            this.SpecularMapBlendFactor = 1.0;
            this.UseImageFileForSpecularMap = false;
            this.SpecularMapFileName = null;
            this.SpecularMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.SpecularMapTilingMethod = DxfMapTilingMethod.Tile;
            this.SpecularMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._specularMapTransformMatrixValues = new ListNonNull<double>();
            this.ReflectionMapBlendFactor = 1.0;
            this.UseImageFileForReflectionMap = false;
            this.ReflectionMapFileName = null;
            this.ReflectionMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.ReflectionMapTilingMethod = DxfMapTilingMethod.Tile;
            this.ReflectionMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._reflectionMapTransformMatrixValues = new ListNonNull<double>();
            this.OpacityFactor = 1.0;
            this.OpacityMapBlendFactor = 1.0;
            this.UseImageFileForOpacityMap = false;
            this.OpacityMapFileName = null;
            this.OpacityMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.OpacityMapTilingMethod = DxfMapTilingMethod.Tile;
            this.OpacityMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._opacityMapTransformMatrixValues = new ListNonNull<double>();
            this.BumpMapBlendFactor = 1.0;
            this.UseImageFileForBumpMap = false;
            this.BumpMapFileName = null;
            this.BumpMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.BumpMapTilingMethod = DxfMapTilingMethod.Tile;
            this.BumpMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._bumpMapTransformMatrixValues = new ListNonNull<double>();
            this.RefractionIndex = 1.0;
            this.RefractionMapBlendFactor = 1.0;
            this.UseImageFileForRefractionMap = false;
            this.RefractionMapFileName = null;
            this.RefractionMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.RefractionMapTilingMethod = DxfMapTilingMethod.Tile;
            this.RefractionMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._refractionMapTransformMatrixValues = new ListNonNull<double>();
            this.ColorBleedScale = 0.0;
            this.IndirectDumpScale = 0.0;
            this.ReflectanceScale = 0.0;
            this.TransmittanceScale = 0.0;
            this.IsTwoSided = false;
            this.Luminance = 0.0;
            this.LuminanceMode = 0;
            this.NormalMapMethod = 0;
            this.NormalMapStrength = 1.0;
            this.NormalMapBlendFactor = 1.0;
            this.UseImageFileForNormalMap = false;
            this.NormalMapFileName = null;
            this.NormalMapProjectionMethod = DxfMapProjectionMethod.Planar;
            this.NormalMapTilingMethod = DxfMapTilingMethod.Tile;
            this.NormalMapAutoTransformMethod = DxfMapAutoTransformMethod.NoAutoTransform;
            this._normalMapTransformMatrixValues = new ListNonNull<double>();
            this.IsAnonymous = false;
            this.GlobalIlluminationMode = 0;
            this.FinalGatherMode = 0;
            this.GenProcName = null;
            this.GenProcBooleanValue = false;
            this.GenProcIntegerValue = 0;
            this.GenProcRealValue = 0.0;
            this.GenProcTextValue = null;
            this.GenProcTableEnd = false;
            this.GenProcColorIndexValue = DxfColor.ByLayer;
            this.GenProcColorRGBValue = 0;
            this.GenProcColorName = null;
            this.MapUTile = 0;
            this.MapVTile = 0;
            this.Translucence = 0.0;
            this.SelfIllumination = 0;
            this.Reflectivity = 0.0;
            this.IlluminationModel = 0;
            this.ChannelFlags = 0;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles, bool writeXData)
        {
            base.AddValuePairs(pairs, version, outputHandles, writeXData: false);
            pairs.Add(new DxfCodePair(100, "AcDbMaterial"));
            pairs.Add(new DxfCodePair(1, this.Name));
            pairs.Add(new DxfCodePair(2, this.Description));
            if (this.OverrideAmbientColor != false)
            {
                pairs.Add(new DxfCodePair(70, BoolShort(this.OverrideAmbientColor)));
            }

            if (this.AmbientColorFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(40, this.AmbientColorFactor));
            }

            if (this.AmbientColorValue != 0)
            {
                pairs.Add(new DxfCodePair(90, this.AmbientColorValue));
            }

            if (this.OverrideDiffuseColor != false)
            {
                pairs.Add(new DxfCodePair(71, BoolShort(this.OverrideDiffuseColor)));
            }

            if (this.DiffuseColorFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(41, this.DiffuseColorFactor));
            }

            if (this.DiffuseColorValue != 0)
            {
                pairs.Add(new DxfCodePair(91, this.DiffuseColorValue));
            }

            if (this.DiffuseMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(42, this.DiffuseMapBlendFactor));
            }

            if (this.UseImageFileForDiffuseMap != false)
            {
                pairs.Add(new DxfCodePair(72, BoolShort(this.UseImageFileForDiffuseMap)));
            }

            if (this.DiffuseMapFileName != null)
            {
                pairs.Add(new DxfCodePair(3, this.DiffuseMapFileName));
            }

            if (this.DiffuseMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(73, (short)this.DiffuseMapProjectionMethod));
            }

            if (this.DiffuseMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(74, (short)this.DiffuseMapTilingMethod));
            }

            if (this.DiffuseMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(75, (short)this.DiffuseMapAutoTransformMethod));
            }

            foreach (var item in DiffuseMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(43, item));
            }

            if (this.SpecularGlossFactor != 0.5)
            {
                pairs.Add(new DxfCodePair(44, this.SpecularGlossFactor));
            }

            if (this.OverrideSpecularColor != false)
            {
                pairs.Add(new DxfCodePair(76, BoolShort(this.OverrideSpecularColor)));
            }

            if (this.SpecularColorFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(45, this.SpecularColorFactor));
            }

            if (this.SpecularColorValue != 0)
            {
                pairs.Add(new DxfCodePair(92, this.SpecularColorValue));
            }

            if (this.SpecularMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(46, this.SpecularMapBlendFactor));
            }

            if (this.UseImageFileForSpecularMap != false)
            {
                pairs.Add(new DxfCodePair(77, BoolShort(this.UseImageFileForSpecularMap)));
            }

            if (this.SpecularMapFileName != null)
            {
                pairs.Add(new DxfCodePair(4, this.SpecularMapFileName));
            }

            if (this.SpecularMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(78, (short)this.SpecularMapProjectionMethod));
            }

            if (this.SpecularMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(79, (short)this.SpecularMapTilingMethod));
            }

            if (this.SpecularMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(170, (short)this.SpecularMapAutoTransformMethod));
            }

            foreach (var item in SpecularMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(47, item));
            }

            if (this.ReflectionMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(48, this.ReflectionMapBlendFactor));
            }

            if (this.UseImageFileForReflectionMap != false)
            {
                pairs.Add(new DxfCodePair(171, BoolShort(this.UseImageFileForReflectionMap)));
            }

            if (this.ReflectionMapFileName != null)
            {
                pairs.Add(new DxfCodePair(6, this.ReflectionMapFileName));
            }

            if (this.ReflectionMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(172, (short)this.ReflectionMapProjectionMethod));
            }

            if (this.ReflectionMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(173, (short)this.ReflectionMapTilingMethod));
            }

            if (this.ReflectionMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(174, (short)this.ReflectionMapAutoTransformMethod));
            }

            foreach (var item in ReflectionMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(49, item));
            }

            if (this.OpacityFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(140, this.OpacityFactor));
            }

            if (this.OpacityMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(141, this.OpacityMapBlendFactor));
            }

            if (this.UseImageFileForOpacityMap != false)
            {
                pairs.Add(new DxfCodePair(175, BoolShort(this.UseImageFileForOpacityMap)));
            }

            if (this.OpacityMapFileName != null)
            {
                pairs.Add(new DxfCodePair(7, this.OpacityMapFileName));
            }

            if (this.OpacityMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(176, (short)this.OpacityMapProjectionMethod));
            }

            if (this.OpacityMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(177, (short)this.OpacityMapTilingMethod));
            }

            if (this.OpacityMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(178, (short)this.OpacityMapAutoTransformMethod));
            }

            foreach (var item in OpacityMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(142, item));
            }

            if (this.BumpMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(143, this.BumpMapBlendFactor));
            }

            if (this.UseImageFileForBumpMap != false)
            {
                pairs.Add(new DxfCodePair(179, BoolShort(this.UseImageFileForBumpMap)));
            }

            if (this.BumpMapFileName != null)
            {
                pairs.Add(new DxfCodePair(8, this.BumpMapFileName));
            }

            if (this.BumpMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(270, (short)this.BumpMapProjectionMethod));
            }

            if (this.BumpMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(271, (short)this.BumpMapTilingMethod));
            }

            if (this.BumpMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(272, (short)this.BumpMapAutoTransformMethod));
            }

            foreach (var item in BumpMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(144, item));
            }

            if (this.RefractionIndex != 1.0)
            {
                pairs.Add(new DxfCodePair(145, this.RefractionIndex));
            }

            if (this.RefractionMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(146, this.RefractionMapBlendFactor));
            }

            if (this.UseImageFileForRefractionMap != false)
            {
                pairs.Add(new DxfCodePair(273, BoolShort(this.UseImageFileForRefractionMap)));
            }

            if (this.RefractionMapFileName != null)
            {
                pairs.Add(new DxfCodePair(9, this.RefractionMapFileName));
            }

            if (this.RefractionMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(274, (short)this.RefractionMapProjectionMethod));
            }

            if (this.RefractionMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(275, (short)this.RefractionMapTilingMethod));
            }

            if (this.RefractionMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(276, (short)this.RefractionMapAutoTransformMethod));
            }

            foreach (var item in RefractionMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(147, item));
            }

            if (version >= DxfAcadVersion.R2007 && this.ColorBleedScale != 0.0)
            {
                pairs.Add(new DxfCodePair(460, this.ColorBleedScale));
            }

            if (version >= DxfAcadVersion.R2007 && this.IndirectDumpScale != 0.0)
            {
                pairs.Add(new DxfCodePair(461, this.IndirectDumpScale));
            }

            if (version >= DxfAcadVersion.R2007 && this.ReflectanceScale != 0.0)
            {
                pairs.Add(new DxfCodePair(462, this.ReflectanceScale));
            }

            if (version >= DxfAcadVersion.R2007 && this.TransmittanceScale != 0.0)
            {
                pairs.Add(new DxfCodePair(463, this.TransmittanceScale));
            }

            if (version >= DxfAcadVersion.R2007 && this.IsTwoSided != false)
            {
                pairs.Add(new DxfCodePair(290, this.IsTwoSided));
            }

            if (version >= DxfAcadVersion.R2007 && this.Luminance != 0.0)
            {
                pairs.Add(new DxfCodePair(464, this.Luminance));
            }

            if (version >= DxfAcadVersion.R2007 && this.LuminanceMode != 0)
            {
                pairs.Add(new DxfCodePair(270, this.LuminanceMode));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapMethod != 0)
            {
                pairs.Add(new DxfCodePair(271, this.NormalMapMethod));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapStrength != 1.0)
            {
                pairs.Add(new DxfCodePair(465, this.NormalMapStrength));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapBlendFactor != 1.0)
            {
                pairs.Add(new DxfCodePair(42, this.NormalMapBlendFactor));
            }

            if (version >= DxfAcadVersion.R2007 && this.UseImageFileForNormalMap != false)
            {
                pairs.Add(new DxfCodePair(72, BoolShort(this.UseImageFileForNormalMap)));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapFileName != null)
            {
                pairs.Add(new DxfCodePair(3, this.NormalMapFileName));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapProjectionMethod != DxfMapProjectionMethod.Planar)
            {
                pairs.Add(new DxfCodePair(73, (short)this.NormalMapProjectionMethod));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapTilingMethod != DxfMapTilingMethod.Tile)
            {
                pairs.Add(new DxfCodePair(74, (short)this.NormalMapTilingMethod));
            }

            if (version >= DxfAcadVersion.R2007 && this.NormalMapAutoTransformMethod != DxfMapAutoTransformMethod.NoAutoTransform)
            {
                pairs.Add(new DxfCodePair(75, (short)this.NormalMapAutoTransformMethod));
            }

            foreach (var item in NormalMapTransformMatrix?.GetValues() ?? new double[0])
            {
                pairs.Add(new DxfCodePair(43, item));
            }

            if (version >= DxfAcadVersion.R2007 && this.IsAnonymous != false)
            {
                pairs.Add(new DxfCodePair(293, this.IsAnonymous));
            }

            if (version >= DxfAcadVersion.R2007 && this.GlobalIlluminationMode != 0)
            {
                pairs.Add(new DxfCodePair(272, this.GlobalIlluminationMode));
            }

            if (version >= DxfAcadVersion.R2007 && this.FinalGatherMode != 0)
            {
                pairs.Add(new DxfCodePair(273, this.FinalGatherMode));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcName != null)
            {
                pairs.Add(new DxfCodePair(300, this.GenProcName));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcBooleanValue != false)
            {
                pairs.Add(new DxfCodePair(291, this.GenProcBooleanValue));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcIntegerValue != 0)
            {
                pairs.Add(new DxfCodePair(271, this.GenProcIntegerValue));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcRealValue != 0.0)
            {
                pairs.Add(new DxfCodePair(469, this.GenProcRealValue));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcTextValue != null)
            {
                pairs.Add(new DxfCodePair(301, this.GenProcTextValue));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcTableEnd != false)
            {
                pairs.Add(new DxfCodePair(292, this.GenProcTableEnd));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcColorIndexValue != DxfColor.ByLayer)
            {
                pairs.Add(new DxfCodePair(62, GetRawValue(this.GenProcColorIndexValue)));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcColorRGBValue != 0)
            {
                pairs.Add(new DxfCodePair(420, this.GenProcColorRGBValue));
            }

            if (version >= DxfAcadVersion.R2007 && this.GenProcColorName != null)
            {
                pairs.Add(new DxfCodePair(430, this.GenProcColorName));
            }

            if (version >= DxfAcadVersion.R2007 && this.MapUTile != 0)
            {
                pairs.Add(new DxfCodePair(270, this.MapUTile));
            }

            if (version >= DxfAcadVersion.R2010 && this.Translucence != 0.0)
            {
                pairs.Add(new DxfCodePair(148, this.Translucence));
            }

            if (version >= DxfAcadVersion.R2010 && this.SelfIllumination != 0)
            {
                pairs.Add(new DxfCodePair(90, this.SelfIllumination));
            }

            if (version >= DxfAcadVersion.R2010 && this.Reflectivity != 0.0)
            {
                pairs.Add(new DxfCodePair(468, this.Reflectivity));
            }

            if (version >= DxfAcadVersion.R2010 && this.IlluminationModel != 0)
            {
                pairs.Add(new DxfCodePair(93, this.IlluminationModel));
            }

            if (version >= DxfAcadVersion.R2010 && this.ChannelFlags != 0)
            {
                pairs.Add(new DxfCodePair(94, this.ChannelFlags));
            }

            if (writeXData)
            {
                DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
            }
        }
    }
}
