// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfViewPort : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewportTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.ViewPort; } }


        public DxfPoint LowerLeft { get; set; }

        public DxfPoint UpperRight { get; set; }

        public DxfPoint ViewCenter { get; set; }

        public DxfPoint SnapBasePoint { get; set; }

        public DxfVector SnapSpacing { get; set; }

        public DxfVector GridSpacing { get; set; }

        public DxfVector ViewDirection { get; set; }

        public DxfPoint TargetViewPoint { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public double ViewHeight { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public double ViewPortAspectRatio { get; set; }

        public double LensLength { get; set; }

        public double FrontClippingPlane { get; set; }

        public double BackClippingPlane { get; set; }

        public double SnapRotationAngle { get; set; }

        public double ViewTwistAngle { get; set; }

        public DxfViewMode ViewMode { get; set; }

        public int CircleSides { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public bool FastZoom { get; set; }

        public short UCSIcon { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public bool SnapOn { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public bool GridOn { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public DxfSnapStyle SnapStyle { get; set; }

        /// <summary>
        /// Maximum drawing version R2004.
        /// </summary>
        public DxfSnapIsometricPlane SnapIsometricPlane { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public string PlotStyleSheet { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfViewRenderMode RenderMode { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.  Maximum drawing version R2004.
        /// </summary>
        public bool HasOwnUCS { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfPoint UCSOrigin { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfVector UCSXAxis { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfVector UCSYAxis { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfOrthographicViewType OrthographicViewType { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public double UCSElevation { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfHandle UCSHandle { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfHandle BaseUCSHandle { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfShadeEdgeMode ShadePlotSetting { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public bool MajorGridLines { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfHandle BackgroundObjectPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfHandle ShadePlotObjectPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfHandle VisualStyleObjectPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public bool IsDefaultLightingOn { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfDefaultLightingType DefaultLightingType { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public double Brightness { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public double Contrast { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfColor AmbientColor { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public int AmbientColorInt { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public string AmbientColorName { get; set; }

        public IDictionary<string, DxfXDataApplicationItemCollection> XData { get; } = new DictionaryWithPredicate<string, DxfXDataApplicationItemCollection>((_key, value) => value != null);

        public DxfViewPort(string name)
            : this()
        {
            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentException(nameof(name), $"Parameter '{nameof(name)}' must have a value.");
            }

            Name = name;
        }

        internal DxfViewPort()
            : base()
        {
            LowerLeft = DxfPoint.Origin;
            UpperRight = new DxfPoint(1.0, 1.0, 0.0);
            ViewCenter = DxfPoint.Origin;
            SnapBasePoint = DxfPoint.Origin;
            SnapSpacing = new DxfVector(1.0, 1.0, 0.0);
            GridSpacing = new DxfVector(1.0, 1.0, 0.0);
            ViewDirection = DxfVector.ZAxis;
            TargetViewPoint = DxfPoint.Origin;
            ViewHeight = 1.0;
            ViewPortAspectRatio = 1.0;
            LensLength = 50.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 0.0;
            ViewHeight = 1.0;
            SnapRotationAngle = 0.0;
            ViewTwistAngle = 0.0;
            ViewMode = 0;
            CircleSides = 1000;
            FastZoom = true;
            UCSIcon = 3;
            SnapOn = false;
            GridOn = false;
            SnapStyle = DxfSnapStyle.Standard;
            SnapIsometricPlane = DxfSnapIsometricPlane.Left;
            PlotStyleSheet = null;
            RenderMode = DxfViewRenderMode.Classic2D;
            HasOwnUCS = false;
            UCSOrigin = DxfPoint.Origin;
            UCSXAxis = DxfVector.XAxis;
            UCSYAxis = DxfVector.YAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            UCSElevation = 0.0;
            UCSHandle = default(DxfHandle);
            BaseUCSHandle = default(DxfHandle);
            ShadePlotSetting = DxfShadeEdgeMode.FacesShadedEdgeNotHighlighted;
            MajorGridLines = false;
            BackgroundObjectPointer = default(DxfHandle);
            ShadePlotObjectPointer = default(DxfHandle);
            VisualStyleObjectPointer = default(DxfHandle);
            IsDefaultLightingOn = true;
            DefaultLightingType = DxfDefaultLightingType.OneDistantLight;
            Brightness = 0.0;
            Contrast = 0.0;
            AmbientColor = DxfColor.FromRawValue(7);
            AmbientColorInt = 0;
            AmbientColorName = "BLACK";
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(10, LowerLeft.X));
            pairs.Add(new DxfCodePair(20, LowerLeft.Y));
            pairs.Add(new DxfCodePair(11, UpperRight.X));
            pairs.Add(new DxfCodePair(21, UpperRight.Y));
            pairs.Add(new DxfCodePair(12, ViewCenter.X));
            pairs.Add(new DxfCodePair(22, ViewCenter.Y));
            pairs.Add(new DxfCodePair(13, SnapBasePoint.X));
            pairs.Add(new DxfCodePair(23, SnapBasePoint.Y));
            pairs.Add(new DxfCodePair(14, EnsurePositiveOrDefault(SnapSpacing.X, 1.0)));
            pairs.Add(new DxfCodePair(24, EnsurePositiveOrDefault(SnapSpacing.Y, 1.0)));
            pairs.Add(new DxfCodePair(15, EnsurePositiveOrDefault(GridSpacing.X, 1.0)));
            pairs.Add(new DxfCodePair(25, EnsurePositiveOrDefault(GridSpacing.Y, 1.0)));
            pairs.Add(new DxfCodePair(16, ViewDirection.X));
            pairs.Add(new DxfCodePair(26, ViewDirection.Y));
            pairs.Add(new DxfCodePair(36, ViewDirection.Z));
            pairs.Add(new DxfCodePair(17, TargetViewPoint.X));
            pairs.Add(new DxfCodePair(27, TargetViewPoint.Y));
            pairs.Add(new DxfCodePair(37, TargetViewPoint.Z));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(40, EnsurePositiveOrDefault(ViewHeight, 1.0)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(41, EnsurePositiveOrDefault(ViewPortAspectRatio, 1.0)));
            }

            pairs.Add(new DxfCodePair(42, EnsurePositiveOrDefault(LensLength, 50.0)));
            pairs.Add(new DxfCodePair(43, FrontClippingPlane));
            pairs.Add(new DxfCodePair(44, BackClippingPlane));
            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(45, EnsurePositiveOrDefault(ViewHeight, 1.0)));
            }

            pairs.Add(new DxfCodePair(50, SnapRotationAngle));
            pairs.Add(new DxfCodePair(51, ViewTwistAngle));
            pairs.Add(new DxfCodePair(71, (short)ViewMode));
            pairs.Add(new DxfCodePair(72, (short)EnsurePositiveOrDefault(CircleSides, 1000)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(73, BoolShort(FastZoom)));
            }

            pairs.Add(new DxfCodePair(74, (short)EnsurePositiveOrDefault(UCSIcon, 3)));
            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(75, BoolShort(SnapOn)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(76, BoolShort(GridOn)));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(77, (short)SnapStyle));
            }

            if (version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(78, (short)SnapIsometricPlane));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(1, PlotStyleSheet));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(281, (short)RenderMode));
            }

            if (version >= DxfAcadVersion.R2000 && version <= DxfAcadVersion.R2004)
            {
                pairs.Add(new DxfCodePair(65, BoolShort(HasOwnUCS)));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(110, UCSOrigin.X));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(120, UCSOrigin.Y));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(130, UCSOrigin.Z));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(111, UCSXAxis.X));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(121, UCSXAxis.Y));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(131, UCSXAxis.Z));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(112, UCSYAxis.X));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(122, UCSYAxis.Y));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(132, UCSYAxis.Z));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)OrthographicViewType));
            }

            if (HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, UCSElevation));
            }

            if (UCSHandle != default(DxfHandle) && HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(345, HandleString(UCSHandle)));
            }

            if (BaseUCSHandle != default(DxfHandle) && HasOwnUCS && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, HandleString(BaseUCSHandle)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(170, (short)ShadePlotSetting));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(61, BoolShort(MajorGridLines)));
            }

            if (BackgroundObjectPointer != default(DxfHandle) && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(332, HandleString(BackgroundObjectPointer)));
            }

            if (ShadePlotObjectPointer != default(DxfHandle) && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(333, HandleString(ShadePlotObjectPointer)));
            }

            if (VisualStyleObjectPointer != default(DxfHandle) && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(348, HandleString(VisualStyleObjectPointer)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(292, IsDefaultLightingOn));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(282, (short)DefaultLightingType));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(141, Brightness));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(142, Contrast));
            }

            if (AmbientColor?.RawValue != 7 && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(62, DxfColor.GetRawValue(AmbientColor)));
            }

            if (AmbientColorInt != 0 && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(421, AmbientColorInt));
            }

            if (AmbientColorName != "BLACK" && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(431, AmbientColorName));
            }

            DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
        }

        internal static DxfViewPort FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfViewPort();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        DxfXData.PopulateFromBuffer(buffer, item.XData, pair.StringValue);
                        break;
                    default:
                        item.ApplyCodePair(pair);
                        break;
                }
            }

            return item;
        }

        private void ApplyCodePair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    StandardFlags = (int)pair.ShortValue;
                    break;
                case 10:
                    LowerLeft = LowerLeft.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    LowerLeft = LowerLeft.WithUpdatedY(pair.DoubleValue);
                    break;
                case 11:
                    UpperRight = UpperRight.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    UpperRight = UpperRight.WithUpdatedY(pair.DoubleValue);
                    break;
                case 12:
                    ViewCenter = ViewCenter.WithUpdatedX(pair.DoubleValue);
                    break;
                case 22:
                    ViewCenter = ViewCenter.WithUpdatedY(pair.DoubleValue);
                    break;
                case 13:
                    SnapBasePoint = SnapBasePoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 23:
                    SnapBasePoint = SnapBasePoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 14:
                    SnapSpacing = SnapSpacing.WithUpdatedX(pair.DoubleValue);
                    break;
                case 24:
                    SnapSpacing = SnapSpacing.WithUpdatedY(pair.DoubleValue);
                    break;
                case 15:
                    GridSpacing = GridSpacing.WithUpdatedX(pair.DoubleValue);
                    break;
                case 25:
                    GridSpacing = GridSpacing.WithUpdatedY(pair.DoubleValue);
                    break;
                case 16:
                    ViewDirection = ViewDirection.WithUpdatedX(pair.DoubleValue);
                    break;
                case 26:
                    ViewDirection = ViewDirection.WithUpdatedY(pair.DoubleValue);
                    break;
                case 36:
                    ViewDirection = ViewDirection.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 17:
                    TargetViewPoint = TargetViewPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 27:
                    TargetViewPoint = TargetViewPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 37:
                    TargetViewPoint = TargetViewPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 40:
                    ViewHeight = pair.DoubleValue;
                    break;
                case 41:
                    ViewPortAspectRatio = pair.DoubleValue;
                    break;
                case 42:
                    LensLength = pair.DoubleValue;
                    break;
                case 43:
                    FrontClippingPlane = pair.DoubleValue;
                    break;
                case 44:
                    BackClippingPlane = pair.DoubleValue;
                    break;
                case 45:
                    ViewHeight = pair.DoubleValue;
                    break;
                case 50:
                    SnapRotationAngle = pair.DoubleValue;
                    break;
                case 51:
                    ViewTwistAngle = pair.DoubleValue;
                    break;
                case 71:
                    ViewMode = (DxfViewMode)pair.ShortValue;
                    break;
                case 72:
                    CircleSides = (int)pair.ShortValue;
                    break;
                case 73:
                    FastZoom = BoolShort(pair.ShortValue);
                    break;
                case 74:
                    UCSIcon = pair.ShortValue;
                    break;
                case 75:
                    SnapOn = BoolShort(pair.ShortValue);
                    break;
                case 76:
                    GridOn = BoolShort(pair.ShortValue);
                    break;
                case 77:
                    SnapStyle = (DxfSnapStyle)pair.ShortValue;
                    break;
                case 78:
                    SnapIsometricPlane = (DxfSnapIsometricPlane)pair.ShortValue;
                    break;
                case 1:
                    PlotStyleSheet = pair.StringValue;
                    break;
                case 281:
                    RenderMode = (DxfViewRenderMode)pair.ShortValue;
                    break;
                case 65:
                    HasOwnUCS = BoolShort(pair.ShortValue);
                    break;
                case 110:
                    UCSOrigin = UCSOrigin.WithUpdatedX(pair.DoubleValue);
                    break;
                case 120:
                    UCSOrigin = UCSOrigin.WithUpdatedY(pair.DoubleValue);
                    break;
                case 130:
                    UCSOrigin = UCSOrigin.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 111:
                    UCSXAxis = UCSXAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 121:
                    UCSXAxis = UCSXAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 131:
                    UCSXAxis = UCSXAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 112:
                    UCSYAxis = UCSYAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 122:
                    UCSYAxis = UCSYAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 132:
                    UCSYAxis = UCSYAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 79:
                    OrthographicViewType = (DxfOrthographicViewType)pair.ShortValue;
                    break;
                case 146:
                    UCSElevation = pair.DoubleValue;
                    break;
                case 345:
                    UCSHandle = HandleString(pair.StringValue);
                    break;
                case 346:
                    BaseUCSHandle = HandleString(pair.StringValue);
                    break;
                case 170:
                    ShadePlotSetting = (DxfShadeEdgeMode)pair.ShortValue;
                    break;
                case 61:
                    MajorGridLines = BoolShort(pair.ShortValue);
                    break;
                case 332:
                    BackgroundObjectPointer = HandleString(pair.StringValue);
                    break;
                case 333:
                    ShadePlotObjectPointer = HandleString(pair.StringValue);
                    break;
                case 348:
                    VisualStyleObjectPointer = HandleString(pair.StringValue);
                    break;
                case 292:
                    IsDefaultLightingOn = pair.BoolValue;
                    break;
                case 282:
                    DefaultLightingType = (DxfDefaultLightingType)pair.ShortValue;
                    break;
                case 141:
                    Brightness = pair.DoubleValue;
                    break;
                case 142:
                    Contrast = pair.DoubleValue;
                    break;
                case 62:
                    AmbientColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 421:
                    AmbientColorInt = pair.IntegerValue;
                    break;
                case 431:
                    AmbientColorName = pair.StringValue;
                    break;
                default:
                    TrySetPair(pair);
                    break;
            }
        }

        public DxfViewPort Clone()
        {
            return (DxfViewPort)this.MemberwiseClone();
        }
    }
}
