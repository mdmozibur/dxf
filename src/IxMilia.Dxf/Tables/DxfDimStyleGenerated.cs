// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfDimStyle : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbDimStyleTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.DimStyle; } }


        /// <summary>
        /// Corresponds to header variable DIMPOST.
        /// </summary>
        public string DimensioningSuffix { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMAPOST.
        /// </summary>
        public string AlternateDimensioningSuffix { get; set; }

        /// <summary>
        /// Obsolete.  Corresponds to header variable DIMBLK.  Maximum drawing version R14.
        /// </summary>
        public string ArrowBlockName { get; set; }

        /// <summary>
        /// Obsolete.  Corresponds to header variable DIMBLK1.  Maximum drawing version R14.
        /// </summary>
        public string FirstArrowBlockName { get; set; }

        /// <summary>
        /// Obsolete.  Corresponds to header variable DIMBLK2.  Maximum drawing version R14.
        /// </summary>
        public string SecondArrowBlockName { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMSCALE.
        /// </summary>
        public double DimensioningScaleFactor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMASZ.
        /// </summary>
        public double DimensioningArrowSize { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMEXO.
        /// </summary>
        public double DimensionExtensionLineOffset { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMDLI.
        /// </summary>
        public double DimensionLineIncrement { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMEXE.
        /// </summary>
        public double DimensionExtensionLineExtension { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMRND.
        /// </summary>
        public double DimensionDistanceRoundingValue { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMDLE.
        /// </summary>
        public double DimensionLineExtension { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTP.
        /// </summary>
        public double DimensionPlusTolerance { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTM.
        /// </summary>
        public double DimensionMinusTolerance { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTOL.
        /// </summary>
        public bool GenerateDimensionTolerances { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMLIM.
        /// </summary>
        public bool GenerateDimensionLimits { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTIH.
        /// </summary>
        public bool DimensionTextInsideHorizontal { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTOH.
        /// </summary>
        public bool DimensionTextOutsideHorizontal { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMSE1.
        /// </summary>
        public bool SuppressFirstDimensionExtensionLine { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMSE2.
        /// </summary>
        public bool SuppressSecondDimensionExtensionLine { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTAD.
        /// </summary>
        public bool TextAboveDimensionLine { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMZIN.
        /// </summary>
        public DxfUnitZeroSuppression DimensionUnitZeroSuppression { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMAZIN.  Minimum drawing version R2000.
        /// </summary>
        public DxfAngularZeroSuppression DimensionAngleZeroSuppression { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTXT.
        /// </summary>
        public double DimensioningTextHeight { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMCEN.
        /// </summary>
        public double CenterMarkSize { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTSZ.
        /// </summary>
        public double DimensioningTickSize { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTF.
        /// </summary>
        public double AlternateDimensioningScaleFactor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMLFAC.
        /// </summary>
        public double DimensionLinearMeasurementScaleFactor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTVP.
        /// </summary>
        public double DimensionVerticalTextPosition { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTFAC.
        /// </summary>
        public double DimensionToleranceDisplaceScaleFactor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMGAP.
        /// </summary>
        public double DimensionLineGap { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTRND.  Minimum drawing version R2000.
        /// </summary>
        public double AlternateDimensioningUnitRounding { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALT.
        /// </summary>
        public bool UseAlternateDimensioning { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTD.
        /// </summary>
        public short AlternateDimensioningDecimalPlaces { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTOFL.
        /// </summary>
        public bool ForceDimensionLineExtensionsOutsideIfTextExists { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMSAH.
        /// </summary>
        public bool UseSeparateArrowBlocksForDimensions { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTIX.
        /// </summary>
        public bool ForceDimensionTextInsideExtensions { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMSOXD.
        /// </summary>
        public bool SuppressOutsideExtensionDimensionLines { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMCLRD.
        /// </summary>
        public DxfColor DimensionLineColor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMCLRE.
        /// </summary>
        public DxfColor DimensionExtensionLineColor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMCLRT.
        /// </summary>
        public DxfColor DimensionTextColor { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMADEC.  Minimum drawing version R2000.
        /// </summary>
        public short AngularDimensionPrecision { get; set; }

        /// <summary>
        /// Obsolete.  Use <see cref="DimensionNonAngularUnits"/> and <see cref="DimensionFractionFormat"/> instead.  Corresponds to header variable DIMUNIT.  Minimum drawing version R13.
        /// </summary>
        public DxfUnitFormat DimensionUnitFormat { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMDEC.  Minimum drawing version R13.
        /// </summary>
        public short DimensionUnitToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTDEC.  Minimum drawing version R13.
        /// </summary>
        public short DimensionToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTU.  Minimum drawing version R13.
        /// </summary>
        public DxfUnitFormat AlternateDimensioningUnits { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTTD.  Minimum drawing version R13.
        /// </summary>
        public short AlternateDimensioningToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMAUNIT.  Minimum drawing version R13.
        /// </summary>
        public DxfAngleFormat DimensioningAngleFormat { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMFRAC.  Minimum drawing version R2000.
        /// </summary>
        public DxfDimensionFractionFormat DimensionFractionFormat { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMLUNIT.  Minimum drawing version R2000.
        /// </summary>
        public DxfNonAngularUnits DimensionNonAngularUnits { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMDSEP.  Minimum drawing version R2000.
        /// </summary>
        public char DimensionDecimalSeparatorChar { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTMOVE.  Minimum drawing version R2000.
        /// </summary>
        public DxfDimensionTextMovementRule DimensionTextMovementRule { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMJUST.  Minimum drawing version R13.
        /// </summary>
        public DxfDimensionTextJustification DimensionTextJustification { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTOLJ.  Minimum drawing version R13.
        /// </summary>
        public DxfJustification DimensionToleranceVerticalJustification { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTZIN.  Minimum drawing version R13.
        /// </summary>
        public DxfToleranceZeroSuppression DimensionToleranceZeroSuppression { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTZ.  Minimum drawing version R13.
        /// </summary>
        public DxfAlternateUnitZeroSuppression AlternateDimensioningZeroSuppression { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMALTTZ.  Minimum drawing version R13.
        /// </summary>
        public DxfAlternateToleranceZeroSuppression AlternateDimensioningToleranceZeroSuppression { get; set; }

        /// <summary>
        /// Obsolete.  Use <see cref="DimensionTextAndArrowPlacement"/> and <see cref="DimensionTextMovementRule"/> instead.  Corresponds to header variable DIMFIT.  Minimum drawing version R13.
        /// </summary>
        public DxfDimensionFit DimensionTextAndArrowPlacement { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMUPT.  Minimum drawing version R13.
        /// </summary>
        public bool DimensionCursorControlsTextPosition { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMTXSTY.  Minimum drawing version R13.
        /// </summary>
        public string DimensionTextStyle { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMLDRBLK.  Minimum drawing version R2000.
        /// </summary>
        public string DimensionLeaderBlockName { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMLWD.  Minimum drawing version R2000.
        /// </summary>
        public DxfLineWeight DimensionLineWeight { get; set; }

        /// <summary>
        /// Corresponds to header variable DIMLWE.  Minimum drawing version R2000.
        /// </summary>
        public DxfLineWeight DimensionExtensionLineWeight { get; set; }

        public IDictionary<string, DxfXDataApplicationItemCollection> XData { get; } = new DictionaryWithPredicate<string, DxfXDataApplicationItemCollection>((_key, value) => value != null);

        public DxfDimStyle(string name)
            : this()
        {
            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentException(nameof(name), $"Parameter '{nameof(name)}' must have a value.");
            }

            Name = name;
        }

        internal DxfDimStyle()
            : base()
        {
            DimensioningSuffix = null;
            AlternateDimensioningSuffix = null;
            ArrowBlockName = null;
            FirstArrowBlockName = null;
            SecondArrowBlockName = null;
            DimensioningScaleFactor = 1.0;
            DimensioningArrowSize = 0.18;
            DimensionExtensionLineOffset = 0.0625;
            DimensionLineIncrement = 0.38;
            DimensionExtensionLineExtension = 0.18;
            DimensionDistanceRoundingValue = 0.0;
            DimensionLineExtension = 0.0;
            DimensionPlusTolerance = 0.0;
            DimensionMinusTolerance = 0.0;
            GenerateDimensionTolerances = false;
            GenerateDimensionLimits = false;
            DimensionTextInsideHorizontal = true;
            DimensionTextOutsideHorizontal = true;
            SuppressFirstDimensionExtensionLine = false;
            SuppressSecondDimensionExtensionLine = false;
            TextAboveDimensionLine = false;
            DimensionUnitZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            DimensionAngleZeroSuppression = DxfAngularZeroSuppression.DisplayAllLeadingAndTrailingZeros;
            DimensioningTextHeight = 0.18;
            CenterMarkSize = 0.09;
            DimensioningTickSize = 0.0;
            AlternateDimensioningScaleFactor = 25.4;
            DimensionLinearMeasurementScaleFactor = 1.0;
            DimensionVerticalTextPosition = 0.0;
            DimensionToleranceDisplaceScaleFactor = 1.0;
            DimensionLineGap = 0.09;
            AlternateDimensioningUnitRounding = 0.0;
            UseAlternateDimensioning = false;
            AlternateDimensioningDecimalPlaces = 2;
            ForceDimensionLineExtensionsOutsideIfTextExists = false;
            UseSeparateArrowBlocksForDimensions = false;
            ForceDimensionTextInsideExtensions = false;
            SuppressOutsideExtensionDimensionLines = false;
            DimensionLineColor = null;
            DimensionExtensionLineColor = null;
            DimensionTextColor = null;
            AngularDimensionPrecision = 0;
            DimensionUnitFormat = DxfUnitFormat.Scientific;
            DimensionUnitToleranceDecimalPlaces = 0;
            DimensionToleranceDecimalPlaces = 0;
            AlternateDimensioningUnits = DxfUnitFormat.Scientific;
            AlternateDimensioningToleranceDecimalPlaces = 0;
            DimensioningAngleFormat = DxfAngleFormat.DecimalDegrees;
            DimensionFractionFormat = DxfDimensionFractionFormat.HorizontalStacking;
            DimensionNonAngularUnits = DxfNonAngularUnits.Scientific;
            DimensionDecimalSeparatorChar = '.';
            DimensionTextMovementRule = DxfDimensionTextMovementRule.MoveLineWithText;
            DimensionTextJustification = DxfDimensionTextJustification.AboveLineCenter;
            SuppressFirstDimensionExtensionLine = false;
            SuppressSecondDimensionExtensionLine = false;
            DimensionToleranceVerticalJustification = DxfJustification.Top;
            DimensionToleranceZeroSuppression = DxfToleranceZeroSuppression.SuppressZeroFeetAndZeroInches;
            AlternateDimensioningZeroSuppression = DxfAlternateUnitZeroSuppression.SuppressZeroFeetAndZeroInches;
            AlternateDimensioningToleranceZeroSuppression = DxfAlternateToleranceZeroSuppression.SuppressZeroFeetAndZeroInches;
            DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines;
            DimensionCursorControlsTextPosition = true;
            DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines;
            DimensionTextStyle = null;
            DimensionLeaderBlockName = null;
            ArrowBlockName = null;
            FirstArrowBlockName = null;
            SecondArrowBlockName = null;
            DimensionLineWeight = new DxfLineWeight();
            DimensionExtensionLineWeight = new DxfLineWeight();
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(3, DimensioningSuffix));
            pairs.Add(new DxfCodePair(4, AlternateDimensioningSuffix));
            if (version <= DxfAcadVersion.R14)
            {
                pairs.Add(new DxfCodePair(5, ArrowBlockName));
            }

            if (version <= DxfAcadVersion.R14)
            {
                pairs.Add(new DxfCodePair(6, FirstArrowBlockName));
            }

            if (version <= DxfAcadVersion.R14)
            {
                pairs.Add(new DxfCodePair(7, SecondArrowBlockName));
            }

            pairs.Add(new DxfCodePair(40, DimensioningScaleFactor));
            pairs.Add(new DxfCodePair(41, DimensioningArrowSize));
            pairs.Add(new DxfCodePair(42, DimensionExtensionLineOffset));
            pairs.Add(new DxfCodePair(43, DimensionLineIncrement));
            pairs.Add(new DxfCodePair(44, DimensionExtensionLineExtension));
            pairs.Add(new DxfCodePair(45, DimensionDistanceRoundingValue));
            pairs.Add(new DxfCodePair(46, DimensionLineExtension));
            pairs.Add(new DxfCodePair(47, DimensionPlusTolerance));
            pairs.Add(new DxfCodePair(48, DimensionMinusTolerance));
            pairs.Add(new DxfCodePair(71, BoolShort(GenerateDimensionTolerances)));
            pairs.Add(new DxfCodePair(72, BoolShort(GenerateDimensionLimits)));
            pairs.Add(new DxfCodePair(73, BoolShort(DimensionTextInsideHorizontal)));
            pairs.Add(new DxfCodePair(74, BoolShort(DimensionTextOutsideHorizontal)));
            pairs.Add(new DxfCodePair(75, BoolShort(SuppressFirstDimensionExtensionLine)));
            pairs.Add(new DxfCodePair(76, BoolShort(SuppressSecondDimensionExtensionLine)));
            pairs.Add(new DxfCodePair(77, BoolShort(TextAboveDimensionLine)));
            pairs.Add(new DxfCodePair(78, (short)DimensionUnitZeroSuppression));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)DimensionAngleZeroSuppression));
            }

            pairs.Add(new DxfCodePair(140, DimensioningTextHeight));
            pairs.Add(new DxfCodePair(141, CenterMarkSize));
            pairs.Add(new DxfCodePair(142, DimensioningTickSize));
            pairs.Add(new DxfCodePair(143, AlternateDimensioningScaleFactor));
            pairs.Add(new DxfCodePair(144, DimensionLinearMeasurementScaleFactor));
            pairs.Add(new DxfCodePair(145, DimensionVerticalTextPosition));
            pairs.Add(new DxfCodePair(146, DimensionToleranceDisplaceScaleFactor));
            pairs.Add(new DxfCodePair(147, DimensionLineGap));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(148, AlternateDimensioningUnitRounding));
            }

            pairs.Add(new DxfCodePair(170, BoolShort(UseAlternateDimensioning)));
            pairs.Add(new DxfCodePair(171, AlternateDimensioningDecimalPlaces));
            pairs.Add(new DxfCodePair(172, BoolShort(ForceDimensionLineExtensionsOutsideIfTextExists)));
            pairs.Add(new DxfCodePair(173, BoolShort(UseSeparateArrowBlocksForDimensions)));
            pairs.Add(new DxfCodePair(174, BoolShort(ForceDimensionTextInsideExtensions)));
            pairs.Add(new DxfCodePair(175, BoolShort(SuppressOutsideExtensionDimensionLines)));
            pairs.Add(new DxfCodePair(176, DxfColor.GetRawValue(DimensionLineColor)));
            pairs.Add(new DxfCodePair(177, DxfColor.GetRawValue(DimensionExtensionLineColor)));
            pairs.Add(new DxfCodePair(178, DxfColor.GetRawValue(DimensionTextColor)));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(179, AngularDimensionPrecision));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(270, (short)DimensionUnitFormat));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(271, DimensionUnitToleranceDecimalPlaces));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(272, DimensionToleranceDecimalPlaces));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(273, (short)AlternateDimensioningUnits));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(274, AlternateDimensioningToleranceDecimalPlaces));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(275, (short)DimensioningAngleFormat));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(276, (short)DimensionFractionFormat));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(277, (short)DimensionNonAngularUnits));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(278, (short)DimensionDecimalSeparatorChar));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(279, (short)DimensionTextMovementRule));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(280, (short)DimensionTextJustification));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(281, BoolShort(SuppressFirstDimensionExtensionLine)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(282, BoolShort(SuppressSecondDimensionExtensionLine)));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(283, (short)DimensionToleranceVerticalJustification));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(284, (short)DimensionToleranceZeroSuppression));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(285, (short)AlternateDimensioningZeroSuppression));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(286, (short)AlternateDimensioningToleranceZeroSuppression));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(287, (short)DimensionTextAndArrowPlacement));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(288, BoolShort(DimensionCursorControlsTextPosition)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(289, (short)DimensionTextAndArrowPlacement));
            }

            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(340, DimensionTextStyle));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(341, DimensionLeaderBlockName));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(342, ArrowBlockName));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(343, FirstArrowBlockName));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(344, SecondArrowBlockName));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(371, DxfLineWeight.GetRawValue(DimensionLineWeight)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(372, DxfLineWeight.GetRawValue(DimensionExtensionLineWeight)));
            }

            DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
        }

        internal static DxfDimStyle FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfDimStyle();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        DxfXData.PopulateFromBuffer(buffer, item.XData, pair.StringValue);
                        break;
                    default:
                        item.ApplyCodePair(pair);
                        break;
                }
            }

            return item;
        }

        private void ApplyCodePair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    StandardFlags = (int)pair.ShortValue;
                    break;
                case 3:
                    DimensioningSuffix = pair.StringValue;
                    break;
                case 4:
                    AlternateDimensioningSuffix = pair.StringValue;
                    break;
                case 5:
                    ArrowBlockName = pair.StringValue;
                    break;
                case 6:
                    FirstArrowBlockName = pair.StringValue;
                    break;
                case 7:
                    SecondArrowBlockName = pair.StringValue;
                    break;
                case 40:
                    DimensioningScaleFactor = pair.DoubleValue;
                    break;
                case 41:
                    DimensioningArrowSize = pair.DoubleValue;
                    break;
                case 42:
                    DimensionExtensionLineOffset = pair.DoubleValue;
                    break;
                case 43:
                    DimensionLineIncrement = pair.DoubleValue;
                    break;
                case 44:
                    DimensionExtensionLineExtension = pair.DoubleValue;
                    break;
                case 45:
                    DimensionDistanceRoundingValue = pair.DoubleValue;
                    break;
                case 46:
                    DimensionLineExtension = pair.DoubleValue;
                    break;
                case 47:
                    DimensionPlusTolerance = pair.DoubleValue;
                    break;
                case 48:
                    DimensionMinusTolerance = pair.DoubleValue;
                    break;
                case 71:
                    GenerateDimensionTolerances = BoolShort(pair.ShortValue);
                    break;
                case 72:
                    GenerateDimensionLimits = BoolShort(pair.ShortValue);
                    break;
                case 73:
                    DimensionTextInsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case 74:
                    DimensionTextOutsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case 75:
                    SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case 76:
                    SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case 77:
                    TextAboveDimensionLine = BoolShort(pair.ShortValue);
                    break;
                case 78:
                    DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)pair.ShortValue;
                    break;
                case 79:
                    DimensionAngleZeroSuppression = (DxfAngularZeroSuppression)pair.ShortValue;
                    break;
                case 140:
                    DimensioningTextHeight = pair.DoubleValue;
                    break;
                case 141:
                    CenterMarkSize = pair.DoubleValue;
                    break;
                case 142:
                    DimensioningTickSize = pair.DoubleValue;
                    break;
                case 143:
                    AlternateDimensioningScaleFactor = pair.DoubleValue;
                    break;
                case 144:
                    DimensionLinearMeasurementScaleFactor = pair.DoubleValue;
                    break;
                case 145:
                    DimensionVerticalTextPosition = pair.DoubleValue;
                    break;
                case 146:
                    DimensionToleranceDisplaceScaleFactor = pair.DoubleValue;
                    break;
                case 147:
                    DimensionLineGap = pair.DoubleValue;
                    break;
                case 148:
                    AlternateDimensioningUnitRounding = pair.DoubleValue;
                    break;
                case 170:
                    UseAlternateDimensioning = BoolShort(pair.ShortValue);
                    break;
                case 171:
                    AlternateDimensioningDecimalPlaces = pair.ShortValue;
                    break;
                case 172:
                    ForceDimensionLineExtensionsOutsideIfTextExists = BoolShort(pair.ShortValue);
                    break;
                case 173:
                    UseSeparateArrowBlocksForDimensions = BoolShort(pair.ShortValue);
                    break;
                case 174:
                    ForceDimensionTextInsideExtensions = BoolShort(pair.ShortValue);
                    break;
                case 175:
                    SuppressOutsideExtensionDimensionLines = BoolShort(pair.ShortValue);
                    break;
                case 176:
                    DimensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 177:
                    DimensionExtensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 178:
                    DimensionTextColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case 179:
                    AngularDimensionPrecision = pair.ShortValue;
                    break;
                case 270:
                    DimensionUnitFormat = (DxfUnitFormat)pair.ShortValue;
                    break;
                case 271:
                    DimensionUnitToleranceDecimalPlaces = pair.ShortValue;
                    break;
                case 272:
                    DimensionToleranceDecimalPlaces = pair.ShortValue;
                    break;
                case 273:
                    AlternateDimensioningUnits = (DxfUnitFormat)pair.ShortValue;
                    break;
                case 274:
                    AlternateDimensioningToleranceDecimalPlaces = pair.ShortValue;
                    break;
                case 275:
                    DimensioningAngleFormat = (DxfAngleFormat)pair.ShortValue;
                    break;
                case 276:
                    DimensionFractionFormat = (DxfDimensionFractionFormat)pair.ShortValue;
                    break;
                case 277:
                    DimensionNonAngularUnits = (DxfNonAngularUnits)pair.ShortValue;
                    break;
                case 278:
                    DimensionDecimalSeparatorChar = (char)pair.ShortValue;
                    break;
                case 279:
                    DimensionTextMovementRule = (DxfDimensionTextMovementRule)pair.ShortValue;
                    break;
                case 280:
                    DimensionTextJustification = (DxfDimensionTextJustification)pair.ShortValue;
                    break;
                case 281:
                    SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case 282:
                    SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case 283:
                    DimensionToleranceVerticalJustification = (DxfJustification)pair.ShortValue;
                    break;
                case 284:
                    DimensionToleranceZeroSuppression = (DxfToleranceZeroSuppression)pair.ShortValue;
                    break;
                case 285:
                    AlternateDimensioningZeroSuppression = (DxfAlternateUnitZeroSuppression)pair.ShortValue;
                    break;
                case 286:
                    AlternateDimensioningToleranceZeroSuppression = (DxfAlternateToleranceZeroSuppression)pair.ShortValue;
                    break;
                case 287:
                    DimensionTextAndArrowPlacement = (DxfDimensionFit)pair.ShortValue;
                    break;
                case 288:
                    DimensionCursorControlsTextPosition = BoolShort(pair.ShortValue);
                    break;
                case 289:
                    DimensionTextAndArrowPlacement = (DxfDimensionFit)pair.ShortValue;
                    break;
                case 340:
                    DimensionTextStyle = pair.StringValue;
                    break;
                case 341:
                    DimensionLeaderBlockName = pair.StringValue;
                    break;
                case 342:
                    ArrowBlockName = pair.StringValue;
                    break;
                case 343:
                    FirstArrowBlockName = pair.StringValue;
                    break;
                case 344:
                    SecondArrowBlockName = pair.StringValue;
                    break;
                case 371:
                    DimensionLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                    break;
                case 372:
                    DimensionExtensionLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                    break;
                default:
                    TrySetPair(pair);
                    break;
            }
        }

        public DxfDimStyle Clone()
        {
            return (DxfDimStyle)this.MemberwiseClone();
        }

        public void SetVariable(string name, object value)
        {
            switch (name?.ToUpper())
            {
                case "DIMPOST":
                    DimensioningSuffix = (string)value;
                    break;
                case "DIMAPOST":
                    AlternateDimensioningSuffix = (string)value;
                    break;
                case "DIMBLK":
                    ArrowBlockName = (string)value;
                    break;
                case "DIMBLK1":
                    FirstArrowBlockName = (string)value;
                    break;
                case "DIMBLK2":
                    SecondArrowBlockName = (string)value;
                    break;
                case "DIMSCALE":
                    DimensioningScaleFactor = (double)value;
                    break;
                case "DIMASZ":
                    DimensioningArrowSize = (double)value;
                    break;
                case "DIMEXO":
                    DimensionExtensionLineOffset = (double)value;
                    break;
                case "DIMDLI":
                    DimensionLineIncrement = (double)value;
                    break;
                case "DIMEXE":
                    DimensionExtensionLineExtension = (double)value;
                    break;
                case "DIMRND":
                    DimensionDistanceRoundingValue = (double)value;
                    break;
                case "DIMDLE":
                    DimensionLineExtension = (double)value;
                    break;
                case "DIMTP":
                    DimensionPlusTolerance = (double)value;
                    break;
                case "DIMTM":
                    DimensionMinusTolerance = (double)value;
                    break;
                case "DIMTOL":
                    GenerateDimensionTolerances = (bool)value;
                    break;
                case "DIMLIM":
                    GenerateDimensionLimits = (bool)value;
                    break;
                case "DIMTIH":
                    DimensionTextInsideHorizontal = (bool)value;
                    break;
                case "DIMTOH":
                    DimensionTextOutsideHorizontal = (bool)value;
                    break;
                case "DIMSE1":
                    SuppressFirstDimensionExtensionLine = (bool)value;
                    break;
                case "DIMSE2":
                    SuppressSecondDimensionExtensionLine = (bool)value;
                    break;
                case "DIMTAD":
                    TextAboveDimensionLine = (bool)value;
                    break;
                case "DIMZIN":
                    DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case "DIMAZIN":
                    DimensionAngleZeroSuppression = (DxfAngularZeroSuppression)value;
                    break;
                case "DIMTXT":
                    DimensioningTextHeight = (double)value;
                    break;
                case "DIMCEN":
                    CenterMarkSize = (double)value;
                    break;
                case "DIMTSZ":
                    DimensioningTickSize = (double)value;
                    break;
                case "DIMALTF":
                    AlternateDimensioningScaleFactor = (double)value;
                    break;
                case "DIMLFAC":
                    DimensionLinearMeasurementScaleFactor = (double)value;
                    break;
                case "DIMTVP":
                    DimensionVerticalTextPosition = (double)value;
                    break;
                case "DIMTFAC":
                    DimensionToleranceDisplaceScaleFactor = (double)value;
                    break;
                case "DIMGAP":
                    DimensionLineGap = (double)value;
                    break;
                case "DIMALTRND":
                    AlternateDimensioningUnitRounding = (double)value;
                    break;
                case "DIMALT":
                    UseAlternateDimensioning = (bool)value;
                    break;
                case "DIMALTD":
                    AlternateDimensioningDecimalPlaces = (short)value;
                    break;
                case "DIMTOFL":
                    ForceDimensionLineExtensionsOutsideIfTextExists = (bool)value;
                    break;
                case "DIMSAH":
                    UseSeparateArrowBlocksForDimensions = (bool)value;
                    break;
                case "DIMTIX":
                    ForceDimensionTextInsideExtensions = (bool)value;
                    break;
                case "DIMSOXD":
                    SuppressOutsideExtensionDimensionLines = (bool)value;
                    break;
                case "DIMCLRD":
                    DimensionLineColor = (DxfColor)value;
                    break;
                case "DIMCLRE":
                    DimensionExtensionLineColor = (DxfColor)value;
                    break;
                case "DIMCLRT":
                    DimensionTextColor = (DxfColor)value;
                    break;
                case "DIMADEC":
                    AngularDimensionPrecision = (short)value;
                    break;
                case "DIMUNIT":
                    DimensionUnitFormat = (DxfUnitFormat)value;
                    break;
                case "DIMDEC":
                    DimensionUnitToleranceDecimalPlaces = (short)value;
                    break;
                case "DIMTDEC":
                    DimensionToleranceDecimalPlaces = (short)value;
                    break;
                case "DIMALTU":
                    AlternateDimensioningUnits = (DxfUnitFormat)value;
                    break;
                case "DIMALTTD":
                    AlternateDimensioningToleranceDecimalPlaces = (short)value;
                    break;
                case "DIMAUNIT":
                    DimensioningAngleFormat = (DxfAngleFormat)value;
                    break;
                case "DIMFRAC":
                    DimensionFractionFormat = (DxfDimensionFractionFormat)value;
                    break;
                case "DIMLUNIT":
                    DimensionNonAngularUnits = (DxfNonAngularUnits)value;
                    break;
                case "DIMDSEP":
                    DimensionDecimalSeparatorChar = (char)value;
                    break;
                case "DIMTMOVE":
                    DimensionTextMovementRule = (DxfDimensionTextMovementRule)value;
                    break;
                case "DIMJUST":
                    DimensionTextJustification = (DxfDimensionTextJustification)value;
                    break;
                case "DIMSD1":
                    SuppressFirstDimensionExtensionLine = (bool)value;
                    break;
                case "DIMSD2":
                    SuppressSecondDimensionExtensionLine = (bool)value;
                    break;
                case "DIMTOLJ":
                    DimensionToleranceVerticalJustification = (DxfJustification)value;
                    break;
                case "DIMTZIN":
                    DimensionToleranceZeroSuppression = (DxfToleranceZeroSuppression)value;
                    break;
                case "DIMALTZ":
                    AlternateDimensioningZeroSuppression = (DxfAlternateUnitZeroSuppression)value;
                    break;
                case "DIMALTTZ":
                    AlternateDimensioningToleranceZeroSuppression = (DxfAlternateToleranceZeroSuppression)value;
                    break;
                case "DIMFIT":
                    DimensionTextAndArrowPlacement = (DxfDimensionFit)value;
                    break;
                case "DIMUPT":
                    DimensionCursorControlsTextPosition = (bool)value;
                    break;
                case "DIMATFIT":
                    DimensionTextAndArrowPlacement = (DxfDimensionFit)value;
                    break;
                case "DIMTXSTY":
                    DimensionTextStyle = (string)value;
                    break;
                case "DIMLDRBLK":
                    DimensionLeaderBlockName = (string)value;
                    break;
                case "DIMLWD":
                    DimensionLineWeight = (DxfLineWeight)value;
                    break;
                case "DIMLWE":
                    DimensionExtensionLineWeight = (DxfLineWeight)value;
                    break;
            }
        }

        public object GetVariable(string name)
        {
            switch (name?.ToUpper())
            {
                case "DIMPOST":
                    return DimensioningSuffix;
                case "DIMAPOST":
                    return AlternateDimensioningSuffix;
                case "DIMBLK":
                    return ArrowBlockName;
                case "DIMBLK1":
                    return FirstArrowBlockName;
                case "DIMBLK2":
                    return SecondArrowBlockName;
                case "DIMSCALE":
                    return DimensioningScaleFactor;
                case "DIMASZ":
                    return DimensioningArrowSize;
                case "DIMEXO":
                    return DimensionExtensionLineOffset;
                case "DIMDLI":
                    return DimensionLineIncrement;
                case "DIMEXE":
                    return DimensionExtensionLineExtension;
                case "DIMRND":
                    return DimensionDistanceRoundingValue;
                case "DIMDLE":
                    return DimensionLineExtension;
                case "DIMTP":
                    return DimensionPlusTolerance;
                case "DIMTM":
                    return DimensionMinusTolerance;
                case "DIMTOL":
                    return GenerateDimensionTolerances;
                case "DIMLIM":
                    return GenerateDimensionLimits;
                case "DIMTIH":
                    return DimensionTextInsideHorizontal;
                case "DIMTOH":
                    return DimensionTextOutsideHorizontal;
                case "DIMSE1":
                    return SuppressFirstDimensionExtensionLine;
                case "DIMSE2":
                    return SuppressSecondDimensionExtensionLine;
                case "DIMTAD":
                    return TextAboveDimensionLine;
                case "DIMZIN":
                    return DimensionUnitZeroSuppression;
                case "DIMAZIN":
                    return DimensionAngleZeroSuppression;
                case "DIMTXT":
                    return DimensioningTextHeight;
                case "DIMCEN":
                    return CenterMarkSize;
                case "DIMTSZ":
                    return DimensioningTickSize;
                case "DIMALTF":
                    return AlternateDimensioningScaleFactor;
                case "DIMLFAC":
                    return DimensionLinearMeasurementScaleFactor;
                case "DIMTVP":
                    return DimensionVerticalTextPosition;
                case "DIMTFAC":
                    return DimensionToleranceDisplaceScaleFactor;
                case "DIMGAP":
                    return DimensionLineGap;
                case "DIMALTRND":
                    return AlternateDimensioningUnitRounding;
                case "DIMALT":
                    return UseAlternateDimensioning;
                case "DIMALTD":
                    return AlternateDimensioningDecimalPlaces;
                case "DIMTOFL":
                    return ForceDimensionLineExtensionsOutsideIfTextExists;
                case "DIMSAH":
                    return UseSeparateArrowBlocksForDimensions;
                case "DIMTIX":
                    return ForceDimensionTextInsideExtensions;
                case "DIMSOXD":
                    return SuppressOutsideExtensionDimensionLines;
                case "DIMCLRD":
                    return DimensionLineColor;
                case "DIMCLRE":
                    return DimensionExtensionLineColor;
                case "DIMCLRT":
                    return DimensionTextColor;
                case "DIMADEC":
                    return AngularDimensionPrecision;
                case "DIMUNIT":
                    return DimensionUnitFormat;
                case "DIMDEC":
                    return DimensionUnitToleranceDecimalPlaces;
                case "DIMTDEC":
                    return DimensionToleranceDecimalPlaces;
                case "DIMALTU":
                    return AlternateDimensioningUnits;
                case "DIMALTTD":
                    return AlternateDimensioningToleranceDecimalPlaces;
                case "DIMAUNIT":
                    return DimensioningAngleFormat;
                case "DIMFRAC":
                    return DimensionFractionFormat;
                case "DIMLUNIT":
                    return DimensionNonAngularUnits;
                case "DIMDSEP":
                    return DimensionDecimalSeparatorChar;
                case "DIMTMOVE":
                    return DimensionTextMovementRule;
                case "DIMJUST":
                    return DimensionTextJustification;
                case "DIMSD1":
                    return SuppressFirstDimensionExtensionLine;
                case "DIMSD2":
                    return SuppressSecondDimensionExtensionLine;
                case "DIMTOLJ":
                    return DimensionToleranceVerticalJustification;
                case "DIMTZIN":
                    return DimensionToleranceZeroSuppression;
                case "DIMALTZ":
                    return AlternateDimensioningZeroSuppression;
                case "DIMALTTZ":
                    return AlternateDimensioningToleranceZeroSuppression;
                case "DIMFIT":
                    return DimensionTextAndArrowPlacement;
                case "DIMUPT":
                    return DimensionCursorControlsTextPosition;
                case "DIMATFIT":
                    return DimensionTextAndArrowPlacement;
                case "DIMTXSTY":
                    return DimensionTextStyle;
                case "DIMLDRBLK":
                    return DimensionLeaderBlockName;
                case "DIMLWD":
                    return DimensionLineWeight;
                case "DIMLWE":
                    return DimensionExtensionLineWeight;
                default:
                    return null;
            }
        }

        /// <summary>Generates <see cref="DxfXDataApplicationItemCollection"/> of the difference between the styles.  Result may be <see langword="null"/>.</summary>
        public static DxfXDataApplicationItemCollection GenerateStyleDifferenceAsXData(DxfDimStyle primaryStyle, DxfDimStyle modifiedStyle)
        {
            var itemList = new DxfXDataItemList();

            if (primaryStyle.DimensioningSuffix != modifiedStyle.DimensioningSuffix)
            {
                itemList.Items.Add(new DxfXDataInteger(3));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.DimensioningSuffix));
            }

            if (primaryStyle.AlternateDimensioningSuffix != modifiedStyle.AlternateDimensioningSuffix)
            {
                itemList.Items.Add(new DxfXDataInteger(4));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.AlternateDimensioningSuffix));
            }

            if (primaryStyle.ArrowBlockName != modifiedStyle.ArrowBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(5));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.ArrowBlockName));
            }

            if (primaryStyle.FirstArrowBlockName != modifiedStyle.FirstArrowBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(6));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.FirstArrowBlockName));
            }

            if (primaryStyle.SecondArrowBlockName != modifiedStyle.SecondArrowBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(7));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.SecondArrowBlockName));
            }

            if (primaryStyle.DimensioningScaleFactor != modifiedStyle.DimensioningScaleFactor)
            {
                itemList.Items.Add(new DxfXDataInteger(40));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensioningScaleFactor));
            }

            if (primaryStyle.DimensioningArrowSize != modifiedStyle.DimensioningArrowSize)
            {
                itemList.Items.Add(new DxfXDataInteger(41));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensioningArrowSize));
            }

            if (primaryStyle.DimensionExtensionLineOffset != modifiedStyle.DimensionExtensionLineOffset)
            {
                itemList.Items.Add(new DxfXDataInteger(42));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionExtensionLineOffset));
            }

            if (primaryStyle.DimensionLineIncrement != modifiedStyle.DimensionLineIncrement)
            {
                itemList.Items.Add(new DxfXDataInteger(43));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionLineIncrement));
            }

            if (primaryStyle.DimensionExtensionLineExtension != modifiedStyle.DimensionExtensionLineExtension)
            {
                itemList.Items.Add(new DxfXDataInteger(44));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionExtensionLineExtension));
            }

            if (primaryStyle.DimensionDistanceRoundingValue != modifiedStyle.DimensionDistanceRoundingValue)
            {
                itemList.Items.Add(new DxfXDataInteger(45));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionDistanceRoundingValue));
            }

            if (primaryStyle.DimensionLineExtension != modifiedStyle.DimensionLineExtension)
            {
                itemList.Items.Add(new DxfXDataInteger(46));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionLineExtension));
            }

            if (primaryStyle.DimensionPlusTolerance != modifiedStyle.DimensionPlusTolerance)
            {
                itemList.Items.Add(new DxfXDataInteger(47));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionPlusTolerance));
            }

            if (primaryStyle.DimensionMinusTolerance != modifiedStyle.DimensionMinusTolerance)
            {
                itemList.Items.Add(new DxfXDataInteger(48));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionMinusTolerance));
            }

            if (primaryStyle.GenerateDimensionTolerances != modifiedStyle.GenerateDimensionTolerances)
            {
                itemList.Items.Add(new DxfXDataInteger(71));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.GenerateDimensionTolerances)));
            }

            if (primaryStyle.GenerateDimensionLimits != modifiedStyle.GenerateDimensionLimits)
            {
                itemList.Items.Add(new DxfXDataInteger(72));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.GenerateDimensionLimits)));
            }

            if (primaryStyle.DimensionTextInsideHorizontal != modifiedStyle.DimensionTextInsideHorizontal)
            {
                itemList.Items.Add(new DxfXDataInteger(73));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.DimensionTextInsideHorizontal)));
            }

            if (primaryStyle.DimensionTextOutsideHorizontal != modifiedStyle.DimensionTextOutsideHorizontal)
            {
                itemList.Items.Add(new DxfXDataInteger(74));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.DimensionTextOutsideHorizontal)));
            }

            if (primaryStyle.SuppressFirstDimensionExtensionLine != modifiedStyle.SuppressFirstDimensionExtensionLine)
            {
                itemList.Items.Add(new DxfXDataInteger(75));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.SuppressFirstDimensionExtensionLine)));
            }

            if (primaryStyle.SuppressSecondDimensionExtensionLine != modifiedStyle.SuppressSecondDimensionExtensionLine)
            {
                itemList.Items.Add(new DxfXDataInteger(76));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.SuppressSecondDimensionExtensionLine)));
            }

            if (primaryStyle.TextAboveDimensionLine != modifiedStyle.TextAboveDimensionLine)
            {
                itemList.Items.Add(new DxfXDataInteger(77));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.TextAboveDimensionLine)));
            }

            if (primaryStyle.DimensionUnitZeroSuppression != modifiedStyle.DimensionUnitZeroSuppression)
            {
                itemList.Items.Add(new DxfXDataInteger(78));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionUnitZeroSuppression));
            }

            if (primaryStyle.DimensionAngleZeroSuppression != modifiedStyle.DimensionAngleZeroSuppression)
            {
                itemList.Items.Add(new DxfXDataInteger(79));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionAngleZeroSuppression));
            }

            if (primaryStyle.DimensioningTextHeight != modifiedStyle.DimensioningTextHeight)
            {
                itemList.Items.Add(new DxfXDataInteger(140));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensioningTextHeight));
            }

            if (primaryStyle.CenterMarkSize != modifiedStyle.CenterMarkSize)
            {
                itemList.Items.Add(new DxfXDataInteger(141));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.CenterMarkSize));
            }

            if (primaryStyle.DimensioningTickSize != modifiedStyle.DimensioningTickSize)
            {
                itemList.Items.Add(new DxfXDataInteger(142));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensioningTickSize));
            }

            if (primaryStyle.AlternateDimensioningScaleFactor != modifiedStyle.AlternateDimensioningScaleFactor)
            {
                itemList.Items.Add(new DxfXDataInteger(143));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.AlternateDimensioningScaleFactor));
            }

            if (primaryStyle.DimensionLinearMeasurementScaleFactor != modifiedStyle.DimensionLinearMeasurementScaleFactor)
            {
                itemList.Items.Add(new DxfXDataInteger(144));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionLinearMeasurementScaleFactor));
            }

            if (primaryStyle.DimensionVerticalTextPosition != modifiedStyle.DimensionVerticalTextPosition)
            {
                itemList.Items.Add(new DxfXDataInteger(145));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionVerticalTextPosition));
            }

            if (primaryStyle.DimensionToleranceDisplaceScaleFactor != modifiedStyle.DimensionToleranceDisplaceScaleFactor)
            {
                itemList.Items.Add(new DxfXDataInteger(146));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionToleranceDisplaceScaleFactor));
            }

            if (primaryStyle.DimensionLineGap != modifiedStyle.DimensionLineGap)
            {
                itemList.Items.Add(new DxfXDataInteger(147));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.DimensionLineGap));
            }

            if (primaryStyle.AlternateDimensioningUnitRounding != modifiedStyle.AlternateDimensioningUnitRounding)
            {
                itemList.Items.Add(new DxfXDataInteger(148));
                itemList.Items.Add(new DxfXDataReal(modifiedStyle.AlternateDimensioningUnitRounding));
            }

            if (primaryStyle.UseAlternateDimensioning != modifiedStyle.UseAlternateDimensioning)
            {
                itemList.Items.Add(new DxfXDataInteger(170));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.UseAlternateDimensioning)));
            }

            if (primaryStyle.AlternateDimensioningDecimalPlaces != modifiedStyle.AlternateDimensioningDecimalPlaces)
            {
                itemList.Items.Add(new DxfXDataInteger(171));
                itemList.Items.Add(new DxfXDataInteger(modifiedStyle.AlternateDimensioningDecimalPlaces));
            }

            if (primaryStyle.ForceDimensionLineExtensionsOutsideIfTextExists != modifiedStyle.ForceDimensionLineExtensionsOutsideIfTextExists)
            {
                itemList.Items.Add(new DxfXDataInteger(172));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.ForceDimensionLineExtensionsOutsideIfTextExists)));
            }

            if (primaryStyle.UseSeparateArrowBlocksForDimensions != modifiedStyle.UseSeparateArrowBlocksForDimensions)
            {
                itemList.Items.Add(new DxfXDataInteger(173));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.UseSeparateArrowBlocksForDimensions)));
            }

            if (primaryStyle.ForceDimensionTextInsideExtensions != modifiedStyle.ForceDimensionTextInsideExtensions)
            {
                itemList.Items.Add(new DxfXDataInteger(174));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.ForceDimensionTextInsideExtensions)));
            }

            if (primaryStyle.SuppressOutsideExtensionDimensionLines != modifiedStyle.SuppressOutsideExtensionDimensionLines)
            {
                itemList.Items.Add(new DxfXDataInteger(175));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.SuppressOutsideExtensionDimensionLines)));
            }

            if (primaryStyle.DimensionLineColor != modifiedStyle.DimensionLineColor)
            {
                itemList.Items.Add(new DxfXDataInteger(176));
                itemList.Items.Add(new DxfXDataInteger(DxfColor.GetRawValue(modifiedStyle.DimensionLineColor)));
            }

            if (primaryStyle.DimensionExtensionLineColor != modifiedStyle.DimensionExtensionLineColor)
            {
                itemList.Items.Add(new DxfXDataInteger(177));
                itemList.Items.Add(new DxfXDataInteger(DxfColor.GetRawValue(modifiedStyle.DimensionExtensionLineColor)));
            }

            if (primaryStyle.DimensionTextColor != modifiedStyle.DimensionTextColor)
            {
                itemList.Items.Add(new DxfXDataInteger(178));
                itemList.Items.Add(new DxfXDataInteger(DxfColor.GetRawValue(modifiedStyle.DimensionTextColor)));
            }

            if (primaryStyle.AngularDimensionPrecision != modifiedStyle.AngularDimensionPrecision)
            {
                itemList.Items.Add(new DxfXDataInteger(179));
                itemList.Items.Add(new DxfXDataInteger(modifiedStyle.AngularDimensionPrecision));
            }

            if (primaryStyle.DimensionUnitFormat != modifiedStyle.DimensionUnitFormat)
            {
                itemList.Items.Add(new DxfXDataInteger(270));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionUnitFormat));
            }

            if (primaryStyle.DimensionUnitToleranceDecimalPlaces != modifiedStyle.DimensionUnitToleranceDecimalPlaces)
            {
                itemList.Items.Add(new DxfXDataInteger(271));
                itemList.Items.Add(new DxfXDataInteger(modifiedStyle.DimensionUnitToleranceDecimalPlaces));
            }

            if (primaryStyle.DimensionToleranceDecimalPlaces != modifiedStyle.DimensionToleranceDecimalPlaces)
            {
                itemList.Items.Add(new DxfXDataInteger(272));
                itemList.Items.Add(new DxfXDataInteger(modifiedStyle.DimensionToleranceDecimalPlaces));
            }

            if (primaryStyle.AlternateDimensioningUnits != modifiedStyle.AlternateDimensioningUnits)
            {
                itemList.Items.Add(new DxfXDataInteger(273));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.AlternateDimensioningUnits));
            }

            if (primaryStyle.AlternateDimensioningToleranceDecimalPlaces != modifiedStyle.AlternateDimensioningToleranceDecimalPlaces)
            {
                itemList.Items.Add(new DxfXDataInteger(274));
                itemList.Items.Add(new DxfXDataInteger(modifiedStyle.AlternateDimensioningToleranceDecimalPlaces));
            }

            if (primaryStyle.DimensioningAngleFormat != modifiedStyle.DimensioningAngleFormat)
            {
                itemList.Items.Add(new DxfXDataInteger(275));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensioningAngleFormat));
            }

            if (primaryStyle.DimensionFractionFormat != modifiedStyle.DimensionFractionFormat)
            {
                itemList.Items.Add(new DxfXDataInteger(276));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionFractionFormat));
            }

            if (primaryStyle.DimensionNonAngularUnits != modifiedStyle.DimensionNonAngularUnits)
            {
                itemList.Items.Add(new DxfXDataInteger(277));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionNonAngularUnits));
            }

            if (primaryStyle.DimensionDecimalSeparatorChar != modifiedStyle.DimensionDecimalSeparatorChar)
            {
                itemList.Items.Add(new DxfXDataInteger(278));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionDecimalSeparatorChar));
            }

            if (primaryStyle.DimensionTextMovementRule != modifiedStyle.DimensionTextMovementRule)
            {
                itemList.Items.Add(new DxfXDataInteger(279));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionTextMovementRule));
            }

            if (primaryStyle.DimensionTextJustification != modifiedStyle.DimensionTextJustification)
            {
                itemList.Items.Add(new DxfXDataInteger(280));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionTextJustification));
            }

            if (primaryStyle.SuppressFirstDimensionExtensionLine != modifiedStyle.SuppressFirstDimensionExtensionLine)
            {
                itemList.Items.Add(new DxfXDataInteger(281));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.SuppressFirstDimensionExtensionLine)));
            }

            if (primaryStyle.SuppressSecondDimensionExtensionLine != modifiedStyle.SuppressSecondDimensionExtensionLine)
            {
                itemList.Items.Add(new DxfXDataInteger(282));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.SuppressSecondDimensionExtensionLine)));
            }

            if (primaryStyle.DimensionToleranceVerticalJustification != modifiedStyle.DimensionToleranceVerticalJustification)
            {
                itemList.Items.Add(new DxfXDataInteger(283));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionToleranceVerticalJustification));
            }

            if (primaryStyle.DimensionToleranceZeroSuppression != modifiedStyle.DimensionToleranceZeroSuppression)
            {
                itemList.Items.Add(new DxfXDataInteger(284));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionToleranceZeroSuppression));
            }

            if (primaryStyle.AlternateDimensioningZeroSuppression != modifiedStyle.AlternateDimensioningZeroSuppression)
            {
                itemList.Items.Add(new DxfXDataInteger(285));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.AlternateDimensioningZeroSuppression));
            }

            if (primaryStyle.AlternateDimensioningToleranceZeroSuppression != modifiedStyle.AlternateDimensioningToleranceZeroSuppression)
            {
                itemList.Items.Add(new DxfXDataInteger(286));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.AlternateDimensioningToleranceZeroSuppression));
            }

            if (primaryStyle.DimensionTextAndArrowPlacement != modifiedStyle.DimensionTextAndArrowPlacement)
            {
                itemList.Items.Add(new DxfXDataInteger(287));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionTextAndArrowPlacement));
            }

            if (primaryStyle.DimensionCursorControlsTextPosition != modifiedStyle.DimensionCursorControlsTextPosition)
            {
                itemList.Items.Add(new DxfXDataInteger(288));
                itemList.Items.Add(new DxfXDataInteger(BoolShort(modifiedStyle.DimensionCursorControlsTextPosition)));
            }

            if (primaryStyle.DimensionTextAndArrowPlacement != modifiedStyle.DimensionTextAndArrowPlacement)
            {
                itemList.Items.Add(new DxfXDataInteger(289));
                itemList.Items.Add(new DxfXDataInteger((short)modifiedStyle.DimensionTextAndArrowPlacement));
            }

            if (primaryStyle.DimensionTextStyle != modifiedStyle.DimensionTextStyle)
            {
                itemList.Items.Add(new DxfXDataInteger(340));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.DimensionTextStyle));
            }

            if (primaryStyle.DimensionLeaderBlockName != modifiedStyle.DimensionLeaderBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(341));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.DimensionLeaderBlockName));
            }

            if (primaryStyle.ArrowBlockName != modifiedStyle.ArrowBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(342));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.ArrowBlockName));
            }

            if (primaryStyle.FirstArrowBlockName != modifiedStyle.FirstArrowBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(343));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.FirstArrowBlockName));
            }

            if (primaryStyle.SecondArrowBlockName != modifiedStyle.SecondArrowBlockName)
            {
                itemList.Items.Add(new DxfXDataInteger(344));
                itemList.Items.Add(new DxfXDataString(modifiedStyle.SecondArrowBlockName));
            }

            if (primaryStyle.DimensionLineWeight != modifiedStyle.DimensionLineWeight)
            {
                itemList.Items.Add(new DxfXDataInteger(371));
                itemList.Items.Add(new DxfXDataInteger(DxfLineWeight.GetRawValue(modifiedStyle.DimensionLineWeight)));
            }

            if (primaryStyle.DimensionExtensionLineWeight != modifiedStyle.DimensionExtensionLineWeight)
            {
                itemList.Items.Add(new DxfXDataInteger(372));
                itemList.Items.Add(new DxfXDataInteger(DxfLineWeight.GetRawValue(modifiedStyle.DimensionExtensionLineWeight)));
            }

            return itemList.Items.Count > 0
                ? new DxfXDataApplicationItemCollection(new DxfXDataString(XDataStyleName), itemList)
                : null;
        }
    }
}
