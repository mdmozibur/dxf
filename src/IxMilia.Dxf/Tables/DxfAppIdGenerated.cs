// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfAppId : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbRegAppTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.AppId; } }

        public IDictionary<string, DxfXDataApplicationItemCollection> XData { get; } = new DictionaryWithPredicate<string, DxfXDataApplicationItemCollection>((_key, value) => value != null);

        public DxfAppId(string name)
            : this()
        {
            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentException(nameof(name), $"Parameter '{nameof(name)}' must have a value.");
            }

            Name = name;
        }

        internal DxfAppId()
            : base()
        {
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
        }

        internal static DxfAppId FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfAppId();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        DxfXData.PopulateFromBuffer(buffer, item.XData, pair.StringValue);
                        break;
                    default:
                        item.ApplyCodePair(pair);
                        break;
                }
            }

            return item;
        }

        private void ApplyCodePair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    StandardFlags = (int)pair.ShortValue;
                    break;
                default:
                    TrySetPair(pair);
                    break;
            }
        }

        public DxfAppId Clone()
        {
            return (DxfAppId)this.MemberwiseClone();
        }
    }
}
