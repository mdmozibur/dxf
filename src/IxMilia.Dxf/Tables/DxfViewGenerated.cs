// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfView : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbViewTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.View; } }


        public double ViewHeight { get; set; }

        public DxfPoint ViewCenterPoint { get; set; }

        public double ViewWidth { get; set; }

        public DxfVector ViewDirection { get; set; }

        public DxfPoint TargetPoint { get; set; }

        public double LensLength { get; set; }

        public double FrontClippingPlane { get; set; }

        public double BackClippingPlane { get; set; }

        public double TwistAngle { get; set; }

        public short ViewMode { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfViewRenderMode RenderMode { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public bool IsAssociatedUCSPresent { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public bool IsCameraPlottable { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfHandle BackgroundObjectPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfHandle SelectionObjectPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2007.
        /// </summary>
        public DxfHandle VisualStyleObjectPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2010.
        /// </summary>
        public DxfHandle SunOwnershipPointer { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfPoint UCSOrigin { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfVector UCSXAxis { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfVector UCSYAxis { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfOrthographicViewType OrthographicViewType { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public double UCSElevation { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfHandle UCSHandle { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfHandle BaseUCSHandle { get; set; }

        public IDictionary<string, DxfXDataApplicationItemCollection> XData { get; } = new DictionaryWithPredicate<string, DxfXDataApplicationItemCollection>((_key, value) => value != null);

        public DxfView(string name)
            : this()
        {
            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentException(nameof(name), $"Parameter '{nameof(name)}' must have a value.");
            }

            Name = name;
        }

        internal DxfView()
            : base()
        {
            ViewHeight = 1.0;
            ViewCenterPoint = DxfPoint.Origin;
            ViewWidth = 1.0;
            ViewDirection = DxfVector.ZAxis;
            TargetPoint = DxfPoint.Origin;
            LensLength = 1.0;
            FrontClippingPlane = 0.0;
            BackClippingPlane = 1.0;
            TwistAngle = 0.0;
            ViewMode = 0;
            RenderMode = DxfViewRenderMode.Classic2D;
            IsAssociatedUCSPresent = false;
            IsCameraPlottable = false;
            BackgroundObjectPointer = default(DxfHandle);
            SelectionObjectPointer = default(DxfHandle);
            VisualStyleObjectPointer = default(DxfHandle);
            SunOwnershipPointer = default(DxfHandle);
            UCSOrigin = DxfPoint.Origin;
            UCSXAxis = DxfVector.XAxis;
            UCSYAxis = DxfVector.YAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            UCSElevation = 0.0;
            UCSHandle = default(DxfHandle);
            BaseUCSHandle = default(DxfHandle);
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(40, EnsurePositiveOrDefault(ViewHeight, 1.0)));
            pairs.Add(new DxfCodePair(10, ViewCenterPoint.X));
            pairs.Add(new DxfCodePair(20, ViewCenterPoint.Y));
            pairs.Add(new DxfCodePair(41, EnsurePositiveOrDefault(ViewWidth, 1.0)));
            pairs.Add(new DxfCodePair(11, ViewDirection.X));
            pairs.Add(new DxfCodePair(21, ViewDirection.Y));
            pairs.Add(new DxfCodePair(31, ViewDirection.Z));
            pairs.Add(new DxfCodePair(12, TargetPoint.X));
            pairs.Add(new DxfCodePair(22, TargetPoint.Y));
            pairs.Add(new DxfCodePair(32, TargetPoint.Z));
            pairs.Add(new DxfCodePair(42, EnsurePositiveOrDefault(LensLength, 1.0)));
            pairs.Add(new DxfCodePair(43, FrontClippingPlane));
            pairs.Add(new DxfCodePair(44, BackClippingPlane));
            pairs.Add(new DxfCodePair(50, TwistAngle));
            pairs.Add(new DxfCodePair(71, ViewMode));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(281, (short)RenderMode));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(72, BoolShort(IsAssociatedUCSPresent)));
            }

            if (version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(73, BoolShort(IsCameraPlottable)));
            }

            if (BackgroundObjectPointer != default(DxfHandle) && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(332, HandleString(BackgroundObjectPointer)));
            }

            if (SelectionObjectPointer != default(DxfHandle) && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(334, HandleString(SelectionObjectPointer)));
            }

            if (VisualStyleObjectPointer != default(DxfHandle) && version >= DxfAcadVersion.R2007)
            {
                pairs.Add(new DxfCodePair(348, HandleString(VisualStyleObjectPointer)));
            }

            if (SunOwnershipPointer != default(DxfHandle) && version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(361, HandleString(SunOwnershipPointer)));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(110, UCSOrigin.X));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(120, UCSOrigin.Y));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(130, UCSOrigin.Z));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(111, UCSXAxis.X));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(121, UCSXAxis.Y));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(131, UCSXAxis.Z));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(112, UCSYAxis.X));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(122, UCSYAxis.Y));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(132, UCSYAxis.Z));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)OrthographicViewType));
            }

            if (IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, UCSElevation));
            }

            if (UCSHandle != default(DxfHandle) && IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(345, HandleString(UCSHandle)));
            }

            if (BaseUCSHandle != default(DxfHandle) && IsAssociatedUCSPresent && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, HandleString(BaseUCSHandle)));
            }

            DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
        }

        internal static DxfView FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfView();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        DxfXData.PopulateFromBuffer(buffer, item.XData, pair.StringValue);
                        break;
                    default:
                        item.ApplyCodePair(pair);
                        break;
                }
            }

            return item;
        }

        private void ApplyCodePair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    StandardFlags = (int)pair.ShortValue;
                    break;
                case 40:
                    ViewHeight = pair.DoubleValue;
                    break;
                case 10:
                    ViewCenterPoint = ViewCenterPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    ViewCenterPoint = ViewCenterPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 41:
                    ViewWidth = pair.DoubleValue;
                    break;
                case 11:
                    ViewDirection = ViewDirection.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    ViewDirection = ViewDirection.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    ViewDirection = ViewDirection.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 12:
                    TargetPoint = TargetPoint.WithUpdatedX(pair.DoubleValue);
                    break;
                case 22:
                    TargetPoint = TargetPoint.WithUpdatedY(pair.DoubleValue);
                    break;
                case 32:
                    TargetPoint = TargetPoint.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 42:
                    LensLength = pair.DoubleValue;
                    break;
                case 43:
                    FrontClippingPlane = pair.DoubleValue;
                    break;
                case 44:
                    BackClippingPlane = pair.DoubleValue;
                    break;
                case 50:
                    TwistAngle = pair.DoubleValue;
                    break;
                case 71:
                    ViewMode = pair.ShortValue;
                    break;
                case 281:
                    RenderMode = (DxfViewRenderMode)pair.ShortValue;
                    break;
                case 72:
                    IsAssociatedUCSPresent = BoolShort(pair.ShortValue);
                    break;
                case 73:
                    IsCameraPlottable = BoolShort(pair.ShortValue);
                    break;
                case 332:
                    BackgroundObjectPointer = HandleString(pair.StringValue);
                    break;
                case 334:
                    SelectionObjectPointer = HandleString(pair.StringValue);
                    break;
                case 348:
                    VisualStyleObjectPointer = HandleString(pair.StringValue);
                    break;
                case 361:
                    SunOwnershipPointer = HandleString(pair.StringValue);
                    break;
                case 110:
                    UCSOrigin = UCSOrigin.WithUpdatedX(pair.DoubleValue);
                    break;
                case 120:
                    UCSOrigin = UCSOrigin.WithUpdatedY(pair.DoubleValue);
                    break;
                case 130:
                    UCSOrigin = UCSOrigin.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 111:
                    UCSXAxis = UCSXAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 121:
                    UCSXAxis = UCSXAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 131:
                    UCSXAxis = UCSXAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 112:
                    UCSYAxis = UCSYAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 122:
                    UCSYAxis = UCSYAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 132:
                    UCSYAxis = UCSYAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 79:
                    OrthographicViewType = (DxfOrthographicViewType)pair.ShortValue;
                    break;
                case 146:
                    UCSElevation = pair.DoubleValue;
                    break;
                case 345:
                    UCSHandle = HandleString(pair.StringValue);
                    break;
                case 346:
                    BaseUCSHandle = HandleString(pair.StringValue);
                    break;
                default:
                    TrySetPair(pair);
                    break;
            }
        }

        public DxfView Clone()
        {
            return (DxfView)this.MemberwiseClone();
        }
    }
}
