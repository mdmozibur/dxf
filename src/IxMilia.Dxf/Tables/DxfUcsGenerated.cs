// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfUcs : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbUCSTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.Ucs; } }


        public DxfPoint Origin { get; set; }

        public DxfVector XAxis { get; set; }

        public DxfVector YAxis { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfOrthographicViewType OrthographicViewType { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public double Elevation { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfHandle BaseUcsHandle { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfOrthographicViewType OrthographicType { get; set; }

        /// <summary>
        /// Minimum drawing version R2000.
        /// </summary>
        public DxfPoint OrthographicOrigin { get; set; }

        public IDictionary<string, DxfXDataApplicationItemCollection> XData { get; } = new DictionaryWithPredicate<string, DxfXDataApplicationItemCollection>((_key, value) => value != null);

        public DxfUcs(string name)
            : this()
        {
            if (string.IsNullOrEmpty(name))
            {
                throw new ArgumentException(nameof(name), $"Parameter '{nameof(name)}' must have a value.");
            }

            Name = name;
        }

        internal DxfUcs()
            : base()
        {
            Origin = DxfPoint.Origin;
            XAxis = DxfVector.XAxis;
            YAxis = DxfVector.XAxis;
            OrthographicViewType = DxfOrthographicViewType.None;
            Elevation = 0.0;
            BaseUcsHandle = default(DxfHandle);
            OrthographicType = DxfOrthographicViewType.Top;
            OrthographicOrigin = DxfPoint.Origin;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(10, Origin.X));
            pairs.Add(new DxfCodePair(20, Origin.Y));
            pairs.Add(new DxfCodePair(30, Origin.Z));
            pairs.Add(new DxfCodePair(11, XAxis.X));
            pairs.Add(new DxfCodePair(21, XAxis.Y));
            pairs.Add(new DxfCodePair(31, XAxis.Z));
            pairs.Add(new DxfCodePair(12, YAxis.X));
            pairs.Add(new DxfCodePair(22, YAxis.Y));
            pairs.Add(new DxfCodePair(32, YAxis.Z));
            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(79, (short)OrthographicViewType));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(146, Elevation));
            }

            if (BaseUcsHandle != default(DxfHandle) && version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(346, HandleString(BaseUcsHandle)));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(71, (short)OrthographicType));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(13, OrthographicOrigin.X));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(23, OrthographicOrigin.Y));
            }

            if (version >= DxfAcadVersion.R2000)
            {
                pairs.Add(new DxfCodePair(33, OrthographicOrigin.Z));
            }

            DxfXData.AddValuePairs(XData, pairs, version, outputHandles);
        }

        internal static DxfUcs FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfUcs();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        DxfXData.PopulateFromBuffer(buffer, item.XData, pair.StringValue);
                        break;
                    default:
                        item.ApplyCodePair(pair);
                        break;
                }
            }

            return item;
        }

        private void ApplyCodePair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 70:
                    StandardFlags = (int)pair.ShortValue;
                    break;
                case 10:
                    Origin = Origin.WithUpdatedX(pair.DoubleValue);
                    break;
                case 20:
                    Origin = Origin.WithUpdatedY(pair.DoubleValue);
                    break;
                case 30:
                    Origin = Origin.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 11:
                    XAxis = XAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 21:
                    XAxis = XAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 31:
                    XAxis = XAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 12:
                    YAxis = YAxis.WithUpdatedX(pair.DoubleValue);
                    break;
                case 22:
                    YAxis = YAxis.WithUpdatedY(pair.DoubleValue);
                    break;
                case 32:
                    YAxis = YAxis.WithUpdatedZ(pair.DoubleValue);
                    break;
                case 79:
                    OrthographicViewType = (DxfOrthographicViewType)pair.ShortValue;
                    break;
                case 146:
                    Elevation = pair.DoubleValue;
                    break;
                case 346:
                    BaseUcsHandle = HandleString(pair.StringValue);
                    break;
                case 71:
                    OrthographicType = (DxfOrthographicViewType)pair.ShortValue;
                    break;
                case 13:
                    OrthographicOrigin = OrthographicOrigin.WithUpdatedX(pair.DoubleValue);
                    break;
                case 23:
                    OrthographicOrigin = OrthographicOrigin.WithUpdatedY(pair.DoubleValue);
                    break;
                case 33:
                    OrthographicOrigin = OrthographicOrigin.WithUpdatedZ(pair.DoubleValue);
                    break;
                default:
                    TrySetPair(pair);
                    break;
            }
        }

        public DxfUcs Clone()
        {
            return (DxfUcs)this.MemberwiseClone();
        }
    }
}
